/**
 * 
 * MemberMouse(TM) (http://www.membermouse.com)
 * (c) MemberMouse, LLC. All rights reserved.
 */
class MM_MembershipLevel extends MM_Entity
{	
	public static $SUB_TYPE_PAID = "paid";
	public static $SUB_TYPE_FREE = "free";
	
	public static $DFLT_EMAIL_SUBJECT = "Welcome [MM_Member_Data name='firstName']!";
	public static $DFLT_EMAIL_BODY = "Hi [MM_Member_Data name='firstName'],\n\nThanks for joining our community!\n\nYou can login with the following credentials:\nUsername: [MM_Member_Data name='username']\nPassword: [MM_Member_Data name='password']\n\n<a href=\"[MM_CorePage_Link type='homepage' autoLogin='true']\">Click here to login</a>\n\nIf you have any questions, feel free to contact us at <a href=\"mailto:[MM_Employee_Data name='email']\">[MM_Employee_Data name='email']</a>.\n\nThanks!\n[MM_Employee_Data name='displayName']";
	
	private $emailSubject = "";
	private $emailBody = "";
	private $referenceKey = "";
	private $name = "";
	private $defaultProductId="";
	private $isFreeFlag = "1";
	private $isDefaultFlag = "0";
	private $description = "";
	private $productIds = array();
	private $lastProductIds = array();
	private $categoryIds = array();
	private $status = "1";
	private $emailFromId = "";
	private $bundles = "";
	private $expires = "0";
	private $expireAmount = "";
	private $expirePeriod = "";
	private $welcomeEmailEnabled = "1";
	private $wpRole = "mm-ignore-role";
	
	
	public function getData() 
	{
		global $wpdb;
		
		$sql = "SELECT * FROM ".MM_TABLE_MEMBERSHIP_LEVELS." WHERE id='".$this->id."';";
		$result = $wpdb->get_row($sql);
		
		if($result) {
			$this->setData($result);
		}
		else {
			parent::invalidate();
		}
	}

	public static function findByReferenceKey($key)
	{
		$membership = new MM_MembershipLevel();
	
		if(!empty($key))
		{
			global $wpdb;
			$sql = "SELECT * FROM ".MM_TABLE_MEMBERSHIP_LEVELS." WHERE reference_key='".$key."'";
			$result = $wpdb->get_row($sql);
				
			if($result)
			{
				$membership->setData($result);
			}
			else
			{
				$membership->invalidate();
			}
		}
	
		return $membership;
	}
	
	/**
	 * Determine if a particular membership level is associated with a particular category
	 * 
	 * @param unknown $membershipId ID of the membership level
	 * @param unknown $categoryIds array of category IDs
	 * @return boolean return true if the membership level is associated with one or more of the category IDs passed
	 */
	public static function hasAccessToCategory($membershipId, $categoryIds)
	{
		global $wpdb;
		$sql = "SELECT count(*) as total FROM ".MM_TABLE_MEMBERSHIP_LEVEL_CATEGORIES." WHERE membership_level_id='{$membershipId}' ";
		$sql .= " AND category_id IN (".implode(",", $categoryIds).");";
		$result = $wpdb->get_var($sql);
		
		if($result !== false && intval($result) > 0)
		{
			return true;
		}
		
		return false;
	}
	
	public function setData($data)
	{
		try 
		{
			$this->id = $data->id;
			$this->referenceKey = $data->reference_key;
			$this->name = $data->name;
			$this->wpRole = $data->wp_role;
			$this->isFreeFlag = $data->is_free;
			$this->isDefaultFlag = $data->is_default;
			$this->description = $data->description;
			$this->defaultProductId = $data->default_product_id;
			$this->getAssociatedProducts();
			$this->getAssociatedCategories();
			$this->status = $data->status;
			$this->emailSubject = $data->email_subject;
			$this->emailBody = $data->email_body;
			$this->emailFromId = $data->email_from_id;
			$this->expireAmount = $data->expire_amount;
			$this->expirePeriod = $data->expire_period;
			$this->expires = $data->expires;
			$this->welcomeEmailEnabled = $data->welcome_email_enabled;
			
			parent::validate();
		}
		catch (Exception $ex) 
		{
			parent::invalidate();
		}
	}
	
	public function commitData()
	{
		global $wpdb;
		
		$doUpdate = isset($this->id) && $this->id != "" && intval($this->id) > 0;
		
		MM_Transaction::begin();
		try
		{	
			if(!$doUpdate) 
			{
				$sql = "insert into ".MM_TABLE_MEMBERSHIP_LEVELS." set " .
						"   reference_key = '%s', " .
			 			"	name = '%s'," .
			 			"	wp_role = '%s'," .
			 			"	status='%d'," .
			 			"	is_free='%d'," .
			 			"	is_default='%d'," .
			 			"	description='%s'," .
			 			"	default_product_id='%d'," .
			 			"	email_subject='%s'," .
			 			"	email_body='%s'," .
			 			"	email_from_id='%d'," .
			 			"	welcome_email_enabled='%d'," .
			 			"	expire_amount='%d'," .
			 			"	expire_period='%s'," .
			 			"	expires='%d'" .
			 			"";
			}
		 	else 
		 	{
				$sql = "update ".MM_TABLE_MEMBERSHIP_LEVELS." set " .
						"   reference_key = '%s', " .
			 			"	name = '%s'," .
			 			"	wp_role = '%s'," .
			 			"	status='%d'," .
		 				"	is_free='%d'," .
			 			"	is_default='%d'," .
		 				"	description='%s'," .
		 				"	default_product_id='%d'," .
			 			"	email_subject='%s'," .
			 			"	email_body='%s'," .
			 			"	email_from_id='%d'," .
			 			"	welcome_email_enabled='%d'," .
			 			"	expire_amount='%d'," .
			 			"	expire_period='%s'," .
			 			"	expires='%d' where id='{$this->id}'" .
			 			"";
		 	}
			
		 	$preparedSql = $wpdb->prepare($sql, $this->getReferenceKey(), $this->name, $this->wpRole, $this->status, $this->isFreeFlag, 
		 										$this->isDefaultFlag, $this->description, $this->defaultProductId, 
		 										$this->emailSubject, $this->emailBody, $this->emailFromId, $this->welcomeEmailEnabled,
		 										$this->expireAmount, $this->expirePeriod, $this->expires);
		 											
		 	$result = $wpdb->query($preparedSql);
		 	
		 	if($result === false)
		 	{
		 		MM_Transaction::rollback();
		 		return new MM_Response("Unable to create membership level ({$wpdb->last_error})", MM_Response::$ERROR);
		 	}
		 	
		 	if(!$doUpdate) 
		 	{
		 		$this->id = $wpdb->insert_id;
		 	}
		 	
		 	if(intval($this->id) > 0)
		 	{
		 		// check if any products are being removed that have been purchased
		 		foreach($this->lastProductIds as $oldProductId)
		 		{
		 			if(!in_array($oldProductId, $this->productIds))
		 			{
		 				$hasBeenPurchased = MM_Product::hasBeenPurchased($oldProductId);
		 				
		 				if($hasBeenPurchased)
		 				{
		 					MM_Transaction::rollback();
		 					$product = new MM_Product($oldProductId);
		 					return new MM_Response("Product '{$product->getName()}' has been purchased at least once and cannot be removed from this membership level.", MM_Response::$ERROR);
		 				}
		 			}
		 		}
		 		
		 		// update products
			 	$products = $this->productIds;
			 	if(is_array($products))
			 	{
			 		$this->removeProducts();
			 		foreach($products as $productId)
			 		{
			 			$this->addProduct($productId);
			 		}
			 	}
			 	
			 	// update categories
			 	$categories = $this->categoryIds;
			 	if(is_array($categories))
			 	{
			 		$this->removeCategories();
			 		foreach($categories as $categoryId)
			 		{
			 			$this->addCategory($categoryId);
			 		}
			 	}
		 	}
		 	
		 	$this->addBundles();
		}
		catch(Exception $ex)
		{	
		 	MM_Transaction::rollback();
	 		return new MM_Response("ERROR: unable to create membership level", MM_Response::$ERROR);
		}
		
		MM_Transaction::commit();
	
		return new MM_Response();
	}
	
	public function delete()
	{	
		global $wpdb;
		
		if(!$this->hasAssociations())
		{
			$sql = "DELETE FROM ".MM_TABLE_MEMBERSHIP_LEVELS." WHERE id='%d' LIMIT 1";
			$results = $wpdb->query($wpdb->prepare($sql, $this->id));
			
			// remove bundle relationships
			$this->removeBundles();
			
			$this->removeProducts();
			
			if($results) {
				return true;
			}
		}
		
		return false;
	}
	
	public function hasAssociations()
	{
		global $wpdb;
		
		// check if membership level is the default
		$sql = "select * from ".MM_TABLE_MEMBERSHIP_LEVELS." where id='{$this->id}'";
		$row = $wpdb->get_row($sql);
		
		if($row->is_default == "1") {
			return true;
		}
		
		if($this->hasSubscribers()) {
			return true;
		}
		
		// check if membership level is associated with one or more posts
		$sql = "SELECT count(*) as total FROM ".MM_TABLE_POSTS_ACCESS." WHERE access_type='member_type' AND access_id='{$this->id}'";
		$row = $wpdb->get_row($sql);
			
		if($row->total > 0) {
			return true;	
		}
		
		return false;
	}
	
	public function hasSubscribers()
	{
		global $wpdb;
		
		// check if membership level is associated with one or more users
		if($this->isValid()) {
			$sql = "SELECT count(*) AS total FROM ".MM_TABLE_USER_DATA." WHERE membership_level_id='{$this->id}'";
			$row = $wpdb->get_row($sql);
			
			if($row && $row->total > 0) {
				return true;
			}
		}
		
		return false;
	}
	
	
	/** PRODUCT-RELATED METHODS **/
	
	public function addProduct($productId)
	{
		global $wpdb;
		$this->removeProduct($productId);
		$sql = "insert into ".MM_TABLE_MEMBERSHIP_LEVEL_PRODUCTS." set 
					membership_id='{$this->id}', 
					product_id='{$productId}'
					";
		$res = $wpdb->query($sql);
		if ($res !== false)
		{
			if (!in_array($productId,$this->productIds))
			{
				$this->productIds[] = $productId;
			}
		}
	}
	
	public function removeProduct($productId)
	{
		global $wpdb;
		$sql = "delete from ".MM_TABLE_MEMBERSHIP_LEVEL_PRODUCTS." where membership_id='{$this->id}' AND product_id='{$productId}';";
		$wpdb->query($sql);
	}
	
	private function removeProducts()
	{
		global $wpdb;
		$sql = "delete from ".MM_TABLE_MEMBERSHIP_LEVEL_PRODUCTS." where membership_id='{$this->id}'";
		$wpdb->query($sql);
	}
	
	private function getAssociatedProducts()
	{
		global $wpdb;
		$sql = "select product_id as id from ".MM_TABLE_MEMBERSHIP_LEVEL_PRODUCTS." mtp where membership_id='{$this->id}' ";
		
		$rows = $wpdb->get_results($sql);
	
		$products = array();
		if(is_array($rows)){
			foreach($rows as $product)
			{
				$products[$product->id] = $product->id;
			}
		}
		$this->setProductIds($products);
	}
	
	
	/** CATEGORY-RELATED METHODS **/
	
	public function addCategory($categoryId)
	{
		global $wpdb;
		$this->removeProduct($categoryId);
		$sql = "insert into ".MM_TABLE_MEMBERSHIP_LEVEL_CATEGORIES." set 
					membership_level_id='{$this->id}', 
					category_id='{$categoryId}'
					";
		$res = $wpdb->query($sql);
		if ($res !== false)
		{
			if (!in_array($categoryId, $this->categoryIds))
			{
				$this->categoryIds[] = $categoryId;
			}
		}
	}
	
	public function removeCategory($categoryId)
	{
		global $wpdb;
		$sql = "delete from ".MM_TABLE_MEMBERSHIP_LEVEL_CATEGORIES." where membership_level_id='{$this->id}' AND category_id='{$categoryId}';";
		$wpdb->query($sql);
	}
	
	private function removeCategories()
	{
		global $wpdb;
		$sql = "delete from ".MM_TABLE_MEMBERSHIP_LEVEL_CATEGORIES." where membership_level_id='{$this->id}'";
		$wpdb->query($sql);
	}
	
	private function getAssociatedCategories()
	{
		global $wpdb;
		$sql = "select category_id as id from ".MM_TABLE_MEMBERSHIP_LEVEL_CATEGORIES." mtp where membership_level_id='{$this->id}' ";
		
		$rows = $wpdb->get_results($sql);
	
		$categories = array();
		if(is_array($rows)){
			foreach($rows as $category)
			{
				$categories[$category->id] = $category->id;
			}
		}
		$this->setCategoryIds($categories);
	}
	
	
	/** BUNDLE-RELATED METHODS **/
	
	private function addBundles()
	{
		global $wpdb;
		$this->bundles = (!is_array($this->bundles)) ? array($this->bundles) : $this->bundles;
		
		$this->removeBundles();
		
		if(!empty($this->bundles) && count($this->bundles) > 0) 
		{
			foreach($this->bundles as $bundleId)
			{
				if($bundleId != "null") 
				{
					$sql = "insert into ".MM_TABLE_APPLIED_BUNDLES." set " .
							"	access_type='".MM_AppliedBundle::$ACCESS_TYPE_MEMBERSHIP."'," .
							"	bundle_id='{$bundleId}'," .
							"	access_type_id='{$this->id}' ";
					
					$wpdb->query($sql);
				}
			}
		}
	}
	
	private function removeBundles() 
	{
		global $wpdb;
		
		if(isset($this->id)) 
		{
			$sql = "delete from ".MM_TABLE_APPLIED_BUNDLES." where access_type='".MM_AppliedBundle::$ACCESS_TYPE_MEMBERSHIP."' and access_type_id='{$this->id}'";
			$wpdb->query($sql);
		}
	}
	
	public function getBundles()
	{
		$bundles = array();
		
		if($this->bundles == "")
		{
			global $wpdb;
			
			$sql = "select a.* from ".MM_TABLE_APPLIED_BUNDLES." at, ".MM_TABLE_BUNDLES." a where at.access_type='".MM_AppliedBundle::$ACCESS_TYPE_MEMBERSHIP."' and at.access_type_id='{$this->id}' and at.bundle_id=a.id";
				
			$rows= $wpdb->get_results($sql);
			
			if(!$rows) {
				return array();
			}
			
			if(count($rows) > 0)
			{
				foreach($rows as $row) 
				{
					$bundles[$row->id] = $row->name;
				}
			}
			
			$this->bundles = $bundles;
		}
		
		return $bundles;
	}
	
	public function sendWelcomeEmail($userId)
	{   
		if($this->doSendWelcomeEmail())
		{
			$user = new MM_User($userId);
			$employee = new MM_Employee($this->emailFromId);
			$context = new MM_Context($user, $employee);
			
			$email = new MM_Email();
			$email->setContext($context);
			$email->setSubject($this->emailSubject);
			$email->setBody($this->emailBody);
			$email->setToName($user->getFirstName());
			$email->setToAddress($user->getEmail());
			$email->setFromName($employee->getDisplayName());
			$email->setFromAddress($employee->getEmail());
			
			$response = $email->send();
			
			return $response;
		}
		
		return new MM_Response("Welcome email not enabled for this membership level", MM_Response::$ERROR);
	}
	
	
	public function getAvailableMembershipLevels($core_page_type_id, $page_id)
	{
		global $wpdb;
		
		$sql = "select * from ".MM_TABLE_MEMBERSHIP_LEVELS." mt where mt.id NOT IN (select ref_id from ".MM_TABLE_CORE_PAGES." cp where core_page_type_id='{$core_page_type_id}' and ref_type='member_type' and page_id!='{$page_id}' and ref_id>0)";
		return $wpdb->get_results($sql);
	}
	
	
	/** GETTERS/SETTERS **/
	
	public function getReferenceKey()
	{
		global $wpdb;
	
		if(empty($this->referenceKey))
		{
			// generate a random 6 alphnumeric string
			do {
				$newKey = "m";
				for ($i=0; $i<5; $i++)
				{
					$type = rand(1,3);
					switch ($type) 
					{
						case 1: //numeric
							$newKey.=chr(rand(48,57));
							break;
						case 2: //upper alpha
							$newKey.=chr(rand(65,90));
							break;
						case 3: //lower alpha
						default:
							$newKey.=chr(rand(97,122));
							break;
					}
				}
					
				$results = $wpdb->get_results($wpdb->prepare("select * from ".MM_TABLE_MEMBERSHIP_LEVELS." where reference_key='%s'", $newKey));
			} while (count($results) > 0); //iterate while key is not unique.
					
			$this->referenceKey = $newKey;
					
			// save reference key
			if($this->id > 0)
			{
				$whereClause = array("id" => $this->id);
				$data = array("reference_key"=>$this->referenceKey);
				$result = $wpdb->update(MM_TABLE_MEMBERSHIP_LEVELS, $data, $whereClause);
					
				if($result === false)
				{
					return new MM_Response("Error saving membership level reference key: ".$wpdb->last_error, MM_Response::$ERROR);
				}
			}
		}
	
		return $this->referenceKey;
	}
				
	public function setWelcomeEmailEnabled($str) 
	{
		$this->welcomeEmailEnabled = $str;
	}
	
	public function doSendWelcomeEmail()
	{
		return ($this->welcomeEmailEnabled == "1") ? true : false;
	}
	
	public function setName($str) 
	{
		$this->name = $str;
	}
	
	public function getName()
	{
		return $this->name;
	}
	
	public function setWPRole($str) 
	{
		$this->wpRole = $str;
	}
	
	public function getWPRole()
	{
		return $this->wpRole;
	}
	
	public function setIsFree($str) 
	{
		$this->isFreeFlag = $str;
	}
	
	public function isFree()
	{
		if($this->isFreeFlag == "1") 
		{
			return true;
		}
		else 
		{
			return false;
		}
	}
	
	public function doesExpire()
	{
		if($this->expires == "1")
		{
			return true;
		}
		return false;
	}
	
	public function setExpires($str)
	{
		$this->expires = $str;
	}
	
	public function getExpires()
	{
		return $this->expires;
	}
 	
	public function setIsDefault($str) 
	{
		$this->isDefaultFlag = $str;
	}
	
	public function isDefault()
	{
		return $this->isDefaultFlag;
	}
	
	public function setExpirePeriod($str) 
	{
		$this->expirePeriod = $str;
	}
	
	public function getExpirePeriod()
	{
		return $this->expirePeriod;
	}
	
	public function setExpireAmount($str) 
	{
		$this->expireAmount = $str;
	}
	
	public function getExpireAmount()
	{
		return $this->expireAmount;
	}
	
	public function getExpirationDate($startDate)
	{
		$expirationDate = MM_Utils::getCurrentTime();
		
		if($this->doesExpire())
		{
			$amount = $this->getExpireAmount();
			$period = $this->getExpirePeriod();
			
			switch($period)
			{
				case "days":
					$expirationDate = Date("Y-m-d", strtotime($startDate." + ".$amount." day"));
					break;
						
				case "weeks":
					$expirationDate = Date("Y-m-d", strtotime($startDate." + ".$amount." week"));
					break;
						
				case "months":
					$expirationDate = Date("Y-m-d", strtotime($startDate." + ".$amount." month"));
					break;
			}
		}
		
		return $expirationDate;
	}
	
	public function setDescription($str) 
	{
		$this->description = $str;
	}
	
	public function getDescription()
	{
		return $this->description;
	}
	
	public function setProductIds($productIds) 
	{
		if(is_array($productIds))
		{	
			$this->lastProductIds = $this->productIds;
			$this->productIds = $productIds;
		}
	}
	
	public function getProductIds()
	{
		return $this->productIds;
	}
	
	public function setCategoryIds($categoryIds) 
	{
		if(is_array($categoryIds))
		{	
			$this->categoryIds = $categoryIds;
		}
	}
	
	public function getCategoryIds()
	{
		return $this->categoryIds;
	}
	
	public function setStatus($str) 
	{
		$this->status = $str;
	}
	
	public function getStatus()
	{
		return $this->status;
	}
	
	public function isActive()
	{
		return ($this->status == "1") ? true : false;
	}
	
	public function getDefaultProduct()
	{
		return $this->defaultProductId;
	}
	
	public function setDefaultProduct($str) 
	{
		$this->defaultProductId = $str;
	}
	
	public function getStatusName()
	{
		return MM_Status::getName($this->status);
	}
	
	public function setEmailSubject($str) 
	{
		$this->emailSubject = $str;
	}
	
	public function getEmailSubject()
	{
		if(!empty($this->emailSubject))
		{
			return $this->emailSubject;
		}
		else
		{
			return MM_MembershipLevel::$DFLT_EMAIL_SUBJECT;
		}
	}
	
	public function setEmailBody($str) 
	{
		$this->emailBody = $str;
	}
	
	public function getEmailBody()
	{
		if(!empty($this->emailBody))
		{
			return $this->emailBody;
		}
		else
		{
			return MM_MembershipLevel::$DFLT_EMAIL_BODY;
		}
	}
	
	public function setEmailFromId($str) 
	{
		$this->emailFromId = $str;
	}
	
	public function getEmailFromId()
	{
		return $this->emailFromId;
	}
	
	public function setBundles($str) 
	{
		$this->bundles = $str;
	}
	
	
	/** UTILITES **/
	
	/**
	 * This method returns the default membership level
	 *
	 * @return MM_MembershipLevel the default membership level
	 */
	public static function getDefaultMembership()
	{
		$dfltMembership = new MM_MembershipLevel();
	
		global $wpdb;
	
		$sql = "SELECT id FROM ".MM_TABLE_MEMBERSHIP_LEVELS." WHERE is_default='1' LIMIT 1;";
		$result = $wpdb->get_row($sql);
	
		if($result)
		{
			$dfltMembership = new MM_MembershipLevel($result->id);
		}
	
		return $dfltMembership;
	}
	
	public static function getMembershipLevelPostAccess()
	{
		global $wpdb;
 		$sql = "SELECT mt.id, mt.name FROM ".MM_TABLE_MEMBERSHIP_LEVELS." mt, ".MM_TABLE_POSTS_ACCESS." pa 
 					WHERE 
 						mt.status ='1' and 
 						mt.id = pa.access_id and 
 						pa.access_type='member_type'
 						";
 
 		$rows = $wpdb->get_results($sql);
 		
 		$types = array();
 		if($rows===false)
 		{
 			return $types;
 		}
 		if($rows) 
 		{
	 		foreach($rows as $row)
			{
				$types[$row->id] = $row->name;
			}
 		}
 		
 		return $types;
	}
	
	public static function getMembershipLevelsList($activeStatusOnly=false, $filterBySubType="")
	{
		global $wpdb;
 		
 		$types = array();
 		$whereSql = array();
 		
 		$sql = "SELECT * FROM ".MM_TABLE_MEMBERSHIP_LEVELS;
 		
 		if($activeStatusOnly) 
 		{
 			array_push($whereSql, "status ='1'");
 		}
 		
 		if($filterBySubType == self::$SUB_TYPE_FREE) 
 		{
 			array_push($whereSql, "is_free = '1'");
 		}
 		else if($filterBySubType == self::$SUB_TYPE_PAID) 
 		{
 			array_push($whereSql, "is_free != '1'");
 		}
 		
 		if(count($whereSql) > 0)
 		{
 			$sql .= " WHERE ".join(" AND ", $whereSql);
 		}
 		
 		$sql .= " order by name asc ";
 		
 		$rows = $wpdb->get_results($sql);
 		
 		if($rows===false)
 		{
 			return $types;
 		}
 		if($rows) 
 		{
	 		foreach($rows as $row)
			{
				$types[$row->id] = $row->name;
			}
 		}
 		
 		return $types;
	}
}
