/**
 * 
 * MemberMouse(TM) (http://www.membermouse.com)
 * (c) MemberMouse, LLC. All rights reserved.
 */
class MM_ProtectedContentEngine
{
	function __construct(){}

	public function saveSmartContent($id, $post)
	{
		if($post->post_status != 'auto-draft'
			&& false === (wp_is_post_autosave($post) || wp_is_post_revision($post)))
		{
			$content = $post->post_content;
			$smartTagEngine = new MM_SmartTagUtil();
			$smartTagEngine->saveTags($content, $post->ID);
		}
	}
	
	public function protectContent($postId, $isBlogPage=false)
	{
		global $current_user, $post;
		
		if(intval($postId) <= 0)
		{
			if(isset($post->ID) && intval($post->ID)>0)
			{
				$postId = $post->ID;
			}
			else if(isset($post->data->ID) && intval($post->data->ID))
			{
				$postId = $post->data->ID;
			}
		}
		
		$isBlogHomePage = false;
		$showOnFront = MM_OptionUtils::getOption("show_on_front");
		if($showOnFront == "posts" && is_home())
		{
			$isBlogHomePage = true;
		}
		
		if(!$isBlogHomePage)
		{
			if(isset($postId) && intval($postId)>0)
			{
				if(!$this->canAccessPost($postId,$current_user->ID))
				{
					// determine type of access and determine if page has a protected content area
					// to handle that type of access
					$pce = new MM_ProtectedContentEngine();
					$dateOffset = $pce->daysToAccess($postId, $current_user->ID);
					
					$requestedAccessType = "";
					$allowAccess = false;
					
					if($dateOffset === false)
					{
						$requestedAccessType = MM_DecisionTagProcessor::$ACCESS_NONE;
					}
					else if($dateOffset < 0)
					{
						$requestedAccessType = MM_DecisionTagProcessor::$ACCESS_FUTURE;
					}
					
					if($requestedAccessType != "")
					{
						// check page content for the existence of the appropriate content area to handle
						// the requested access type. For example, if requested access type is None then 
						// there needs to be a MM_NoAccess content area on the page in order to allow 
						// access
						$wpPost = get_post($postId);
						
						if($wpPost)
						{
							$result = 0;
							$content = $wpPost->post_content;
							
							if($requestedAccessType == MM_DecisionTagProcessor::$ACCESS_NONE)
							{
								$regex = "/\[".MM_DecisionTagProcessor::$TAG_ACCESS_DECISION."[\s][^\]]*access=['|\"]*(".MM_DecisionTagProcessor::$ACCESS_NONE.")['|\"]*[^\]]*\]/i";
								$result = preg_match($regex, $content);
							}
							else if($requestedAccessType == MM_DecisionTagProcessor::$ACCESS_FUTURE)
							{
								$regex = "/\[".MM_DecisionTagProcessor::$TAG_ACCESS_DECISION."[\s][^\]]*access=['|\"]*(".MM_DecisionTagProcessor::$ACCESS_FUTURE.")['|\"]*[^\]]*\]/i";
								$result = preg_match($regex, $content);
							}
							
							if($result == 1)
							{
								$allowAccess = true;
							}
						}
					}
					
					// apply filter
					if(class_exists("MM_Filters"))
					{
						$allowAccess = apply_filters(MM_Filters::$BYPASS_CONTENT_PROTECTION, $allowAccess);
					}
					
					if(!$allowAccess)
					{
						$next_page_id = MM_CorePageEngine::getCorePageId(MM_CorePageType::$ERROR, 'error_type', MM_Error::$ACCESS_DENIED);
						
						if($next_page_id!=$postId)
						{
							if(intval($current_user->ID)<=0)
							{
								MM_Session::value(MM_OptionUtils::$OPTION_KEY_LAST_PAGE_DENIED, $postId);
							}
							
							$url = MM_CorePageEngine::getUrl(MM_CorePageType::$ERROR, MM_Error::$ACCESS_DENIED);
							
							if(!is_feed() && !$isBlogPage && !is_search() && !is_archive())
							{
								wp_redirect($url);
								exit;
							}
							
							return false;
						}
					}
				}
				else
				{
					MM_CorePageEngine::redirectToSiteHomePage();
				}
			}
		}
		
		return true;
	}

	public static function getPostDays($access_type, $access_id)
	{
		global $wpdb;
		
		$sql = "select days from ".MM_TABLE_POSTS_ACCESS." where access_type='{$access_type}' and access_id='{$access_id}'";
 		$rows = $wpdb->get_results($sql);
 		if($rows===false)
 		{
 			return array();
 		}
 		$days = array();
 		foreach($rows as $row)
 		{
 			$days[$row->days] = $row->days;
 		}
 		return $days;
	}
	
 	public static function getAccessRights($pageId)
 	{
 		global $wpdb;
 		$sql = "select mt.name as mt_name, at.name as at_name, p.access_type from ".MM_TABLE_POSTS_ACCESS." p
 						LEFT JOIN ".MM_TABLE_MEMBERSHIP_LEVELS." mt on p.access_type='member_type' and p.access_id=mt.id
 						LEFT JOIN ".MM_TABLE_BUNDLES." at on p.access_type='access_tag' and p.access_id=at.id

 					where  p.is_smart_content='0' and post_id='{$pageId}'"; 
 		
 		$rows = $wpdb->get_results($sql);
 		if($rows===false)
 		{
 			return array();
 		}
 		return $rows;
 	}
	
 	/**
 	 * @param $user_id is the id of the user
 	 * @param $access_type is the access type of the given request (access_tag|member_type)
 	 * @param $access_id is the id of the given type (see previous)
 	 * @param $days is the days of the chunk parameter.
 	 * @param $daysComparisonMethod this can equal '>' (for greater than) or '<' (for less than). It 
 	 * indicates which type of comparison to use to determine if access should be granted
 	 * @return true if access is granted to content chunk, otherwise false.
 	 */
 	public function canAccessChunk($user_id, $access_type, $access_id, $days, $daysComparisonMethod = ">")
 	{
 		$user = new MM_User($user_id);
 		$user_perms = new stdClass();
 		
 		if($user->isAdmin())
 		{
 			///get preview mode access
 			$user_perms = $this->getPreviewAccess();
 			
	 		if(empty($user_perms))
	 		{
	 			return false;
	 		}
 		}
 		else
 		{
	 		$user_perms = $this->getUserPermissions($user_id);
	 		
	 		if(empty($user_perms))
	 		{
	 			return false;
	 		}
 		}
 		
 		if(isset($user_perms->$access_type) && !empty($user_perms->$access_type))
		{
			/*
			 * Get days as member to calculate for comparison for the post/page number of days
			 * If a user-applied bundle exists use the date difference for that user and that tag.
			 * If the bundle is derived from a member type, use the days as member number for comparison.
			 */
			$user_days = $user_perms->days_as_member;
			
			if($access_type == "access_tags")
			{
				$user_days = $this->calculateAccessTagDaysByMember($access_id, $user_id);
			}
				
			/// case when bundle is not type 'user' (i.e. type 'member_type') and should use days as member days correlation.
			if($user_days === false)
			{
				$user_days = $user_perms->days_as_member;
			}
				
			if(($index = array_search($access_id, $user_perms->$access_type)) !== false )
			{
				if($daysComparisonMethod == ">" && $user_days >= $days) 
				{
					return true;
				}
				else if($daysComparisonMethod == "<" && $user_days < $days)
				{
					return true;
				}
			}
		}
		
		return false;
 	}
 	
 	/*
 	 * Obtains the post permissions and the user permissions
 	 * if the post permissions finds a match in the users it will compare days and premit/deny.
 	 * @param $user_id is the id of the user
 	 * @param $post_id is the id of the post
 	 * @return boolean true if accessible, otherwise false;
 	 */
 	public function canAccessPost($post_id, $user_id)
 	{
 		global $wpdb;
 		
 		$post_perms= new stdClass();
 		$user_perms = new stdClass();
 	
 		$post_perms = $this->getPostPerms($post_id);
		
 		$user = new MM_User($user_id);
 		if($user->isAdmin())
 		{
 			// get preview mode access
 			$user_perms = $this->getPreviewAccess();
	 		
 			if(empty($user_perms) || (isset($user_perms->member_types[0]) && $user_perms->member_types[0]=="none"))
 			{
 				if(count($post_perms->member_types)>0 || count($post_perms->access_tags)>0)
 				{
					return false;
				}
				else
				{
					return true;
				}	
 			}
 		}
 		else
 		{
	 		$user_perms = $this->getUserPermissions($user_id);
 		}
 		
 		// check if this post is associated with a protected category
 		$isProtectedByCategory = $this->isProtectedByCategory($post_id);
 		
 		// if this post is not protected by membership level, bundle or associated with protected categories, grant access
 		if(empty($post_perms) || (empty($post_perms->access_tags) && empty($post_perms->member_types) && !$isProtectedByCategory))
 		{
 			return true;
 		}
 		
 		// if the user has no permissions, deny access
 		if(empty($user_perms))
 		{
 			return false;
 		}
 		
 		// check access based on membership level and bundle protection
 		if(!empty($post_perms))
 		{
	 		foreach($post_perms as $access_type=>$arr)
	 		{
	 			if(empty($arr))
	 			{
	 				continue;
	 			}
	 				
	 			foreach($arr as $access_id=>$days)
	 			{
	 				if(isset($user_perms->$access_type) && !empty($user_perms->$access_type))
	 				{
	 					/*
	 					 * Get days as member to calculate for comparison for the post/page number of days
	 					 * If a user-applied bundle exists use the date difference for that user and that tag.
	 					 * If the bundle is derived from a member type, use the days as member number for comparison.
	 					 */
	 					$user_days = $user_perms->days_as_member;
	
	 					if($access_type == "access_tags")
	 					{
	 						$user_days = $this->calculateAccessTagDaysByMember($access_id, $user_id);
	 					}
	 						
	 					/// case when bundle is not type 'user' (i.e. type 'member_type') and should use days as member days correlation.
	 					if($user_days===false)
	 					{
	 						$user_days = $user_perms->days_as_member;
	 					}
	 				
	 					if(($index = array_search($access_id, $user_perms->$access_type))!==false )
		 				{
		 					if($user_days>=$days)
		 					{
		 						return true;
		 					}
		 				}
	 				}	
	 			}
	 		}
 		}
 		
 		// check access based on category protection
 		if($isProtectedByCategory)
 		{
 			return $this->hasAccessToCategories($user_perms, $post_id);
 		}
		
 		return false;
 	}
 	
 	public function isProtectedByCategory($postId)
 	{
 		global $wpdb;
 		$categories = get_the_category($postId);
 			
 		if(is_array($categories) && count($categories) > 0)
 		{
 			$categoryIds = array();
 		
 			foreach($categories as $category)
 			{
 				$categoryIds[] = $category->term_id;
 			}
 		
 			$categoryIdList = implode(",", $categoryIds);
 		
 			$sql = "SELECT SUM(total) FROM (SELECT COUNT(*) AS total FROM ".MM_TABLE_MEMBERSHIP_LEVEL_CATEGORIES." WHERE category_id IN ({$categoryIdList}) ";
 			$sql .= "UNION ALL SELECT COUNT(*) AS total FROM ".MM_TABLE_BUNDLE_CATEGORIES." WHERE category_id IN ({$categoryIdList})) AS t;";
 			$result = $wpdb->get_var($sql);
 		
 			if($result !== false && intval($result) > 0)
 			{
 				return true;
 			}
 		}
 		
 		return false;
 	}
 	
 	private function hasAccessToCategories($userPermissions, $postId)
 	{
 		$categories = get_the_category($postId);
 		
 		if(is_array($categories) && count($categories) > 0)
 		{
 			$categoryIds = array();
 		
 			foreach($categories as $category)
 			{
 				$categoryIds[] = $category->term_id;
 			}
 		}
 		
 		// check if member has access to category through their membership level
 		if(isset($userPermissions->member_types) && !empty($userPermissions->member_types))
 		{
 			foreach($userPermissions->member_types as $membershipId)
 			{
 				$result = MM_MembershipLevel::hasAccessToCategory($membershipId, $categoryIds);
 		
 				if($result === true)
 				{
 					return true;
 				}
 			}
 		}
 		
 		// check if member has access to this category through a bundle
 		if(isset($userPermissions->access_tags) && !empty($userPermissions->access_tags))
 		{
 			foreach($userPermissions->access_tags as $bundleId)
 			{
 				$result = MM_Bundle::hasAccessToCategory($bundleId, $categoryIds);
 					
 				if($result === true)
 				{
 					return true;
 				}
 			}
 		}
 		
 		return false;
 	}
 	
 	public function isUnprotected($postId)
 	{
 		$post_perms = $this->getPostPerms($postId);
 		$isProtectedByCategory = $this->isProtectedByCategory($postId);
 		
 		if(empty($post_perms) || (empty($post_perms->access_tags) && empty($post_perms->member_types) && !$isProtectedByCategory))
 		{
 			return true;
 		}
 		else
 		{
 			return false;
 		}
 	}
 	
	/*
	 * Counts number of days to access content (negative number)
	 * If already had access, it will display a [0-9]+ days to access.
	 * Otherwise false if no access ever.
	 */
 	public function daysToAccess($post_id, $user_id)
 	{
 		$post_perms = new stdClass();
 		$user_perms = new stdClass();
 	
 		$post_perms = $this->getPostPerms($post_id);
 		$isProtectedByCategory = $this->isProtectedByCategory($post_id);
 		$user = new MM_User($user_id);
 		
 		if($user->isAdmin())
 		{
 			///get preview mode access
 			///use these perms
 			$user_perms = $this->getPreviewAccess();
	 		
 			if(empty($user_perms) || (isset($user_perms->member_types[0]) && $user_perms->member_types[0]=="none")) 
 			{
 				if(count($post_perms->member_types) > 0 || count($post_perms->access_tags) > 0)
 				{
					return false;
				}
				else
				{
					return true;
				}
 					
 			}
 		}
 		else
 		{
	 		$user_perms = $this->getUserPermissions($user_id);
 		}	
 		
 		if(empty($post_perms) || (empty($post_perms->access_tags) && empty($post_perms->member_types) && !$isProtectedByCategory))
 		{
 			return false;
 		}
 		
 		if(!isset($user_perms->days_as_member))
 		{
 			return false;
 		}
 		
 		if(!empty($post_perms))
 		{
	 		foreach($post_perms as $access_type=>$arr)
	 		{
	 			if(empty($arr))
	 			{
	 				continue;
	 			}
	 				
	 			foreach($arr as $access_id=>$days)
	 			{
	 				if(isset($user_perms->$access_type) && !empty($user_perms->$access_type))
	 				{
	 					$user_days = $user_perms->days_as_member;
	
	 					if($access_type == "access_tags")
	 					{
	 						$user_days = $this->calculateAccessTagDaysByMember($access_id, $user_id);
	 					}
	 				
	 					if(($index = array_search($access_id, $user_perms->$access_type))!==false )
		 				{
		 					if($days>=0)
		 					{
		 						return intval($user_days)-intval($days);
		 					}
		 				}
	 				}	
	 			}
	 		}
 		}
 		
 		// check access based on category protection
 		if($isProtectedByCategory)
 		{
 			return $this->hasAccessToCategories($user_perms, $post_id);
 		}
 		
 		return false;
 	}
 	
 	
 	public function getPostAccessRights($post_id)
 	{
 		global $wpdb;
 		
 		$sql = "select IF(pa.access_type='member_type', mt.name, at.name) as access_name,pa.days, pa.access_type, pa.access_id from " .
 				"	".MM_TABLE_POSTS_ACCESS." pa " .
	 			" 	LEFT JOIN ".MM_TABLE_MEMBERSHIP_LEVELS." mt on pa.access_type='member_type' and pa.access_id=mt.id " .
	 			" 	LEFT JOIN ".MM_TABLE_BUNDLES." at on pa.access_type='access_tag' and pa.access_id=at.id " .
	 			"	where pa.post_id='{$post_id}' and pa.is_smart_content!='1' ";
	 			
 		$rows = $wpdb->get_results($sql);
 		if(!$rows)
 		{
 			return array();
 		}
 			
 		return $rows;
 	}
 	
 	public function removeAccessRights($post_ID, $access_id, $access_type)
 	{
 		global $wpdb;
 		$sql = "delete from ".MM_TABLE_POSTS_ACCESS." where post_id='%d' AND access_id='%d' AND access_type='%s'";
 		return $wpdb->query($wpdb->prepare($sql, $post_ID, $access_id, $access_type));
 	}
 	
	public function removeAllRights($post_id)
	{
		global $wpdb;
		
		$sql = "delete from  ".MM_TABLE_POSTS_ACCESS." where post_id='{$post_id}'";
		return $wpdb->query($sql);
	}
	
 	public function updatePostAccessRights($post_id, $access_type, $access_id, $days=0)
 	{
 		global $wpdb;
 			$sql = "update ".MM_TABLE_POSTS_ACCESS." set " .
 				"days='%s' where ". 
 				"access_id='%d' and access_type='%s' and post_id='%d' ";
 				
		return $wpdb->query($wpdb->prepare($sql, $days,$access_id,$access_type,$post_id));
 	}
 	
 	/*
 	 * @post_id is the WP post id
 	 * @param $access_type (member_type|access_tag)
 	 * @param $access_id is the primary key of the associated access_type
 	 * @days is the number of days
 	 * @return true if successful, otherwise false.
 	 */
 	public function setPostAccessRights($post_id, $access_type, $access_id, $days=0)
 	{
 		global $wpdb;
 		$sql = "select count(*) as total from ".MM_TABLE_POSTS_ACCESS." where post_id='{$post_id}' and access_type='{$access_type}' and access_id='{$access_id}'";
 		$row = $wpdb->get_row($sql);
 		if($row->total>0)
 			return false;
 			
 		$sql = "insert into ".MM_TABLE_POSTS_ACCESS." set " .
 				"post_id='%d', " .
 				"access_type='%s', " .
 				"access_id='%d', " .
 				"days='%s' ";
		return $wpdb->query($wpdb->prepare($sql, $post_id, $access_type, $access_id, $days));
 	}
 	
 	public function getDays($access_id, $access_type, $post_id)
 	{
 		global $wpdb;
 		$sql = "select days from  ".MM_TABLE_POSTS_ACCESS." where post_id='{$post_id}' and access_type='{$access_type}' and access_id='{$access_id}' limit 1";
 		$row = $wpdb->get_row($sql);
 		if(!$row)
 			return 0;
 		
 		return $row->days;
 	}
 	
 	/*
 	 * Admin function to determine preview access based on preview bar
 	 * @return true if can access post, otherwise false.
 	 */
 	public function getPreviewAccess()
 	{
 		global $current_user;
 	 	
 	 	//// get info
 	 	$preview_obj = MM_Preview::getData();
 	 	
 	 	if(!$preview_obj)
 	 	{	
 	 		return false;
 	 	}
 	 	
 	 	$userPermissions = new stdClass();
 	 	$userPermissions->member_types = array($preview_obj->getMembershipId());
 	 	$userPermissions->access_tags = $preview_obj->getBundles();
 	 	$userPermissions->days_as_member = $preview_obj->getDays();
 	 	return $userPermissions;
 	}
 	
 	/*
 	 * Get user related permissions
 	 * member_types=array(membertype_id1,membertype_id2)
 	 * access_tags=array(access_tags_id1,access_tags_id2)
 	 * days_as_member=>[Users use mm_registered] + mm_fixed_days
 	 * @param $user_id is the id of given user
 	 * @return object of user perms.
 	 */
 	private function getUserPermissions($user_id)
 	{
 	 	$userPermissions = new stdClass();
 	 	$userPermissions->member_types = array();
 	 	$userPermissions->access_tags = array();
 	 	$userPermissions->days_as_member = 0;
 	 	
 		$user = new MM_User($user_id);
 		
 		if(!$user->isValid())
 		{
 			return $userPermissions;
 		}
 		
 		if($user->getStatus() != MM_Status::$OVERDUE && $user->getStatus() != MM_Status::$EXPIRED)
 		{
	 	 	$userPermissions->member_types = array(
	 	 		$user->getMembershipId()
	 	 	);
	 	 	
	 	 	$userPermissions->days_as_member = $user->getDaysAsMember();
 		}
 	 	
 	 	// get indirectly applied bundles from membership
 	 	$bundles = $user->getMembershipLevel()->getBundles();
 	 	if(!empty($bundles) && is_array($bundles))
 	 	{
	 	 	foreach($bundles as $id=>$name)
	 	 	{
	 	 		if(!$user->bundleHasExpired($id))
	 	 		{
	 	 			array_push($userPermissions->access_tags, $id);
	 	 		}
	 	 	}
 	 	}
 	 	unset($bundles);
 	 	
 	 	// get directly applied bundles from membership
 	 	$bundles = $user->getAppliedBundles();
 	 	if(!empty($bundles) && is_array($bundles))
 	 	{
	 	 	foreach($bundles as $bundle)
	 	 	{
	 	 		if(!$user->bundleHasExpired($bundle->getBundleId()))
	 	 		{
	 	 			array_push($userPermissions->access_tags, $bundle->getBundleId());
	 	 		}
	 	 	}
 	 	}
 	 	
 	 	return $userPermissions;
 	}
 	
 	/*
 	 * Private get post permissions
 	 * member_types= array(membertype_id=>day accessible)
 	 * access_tags = array(access_tag_id=>day accessible)
 	 * @param $post_id is the id of the post/page
 	 * @return an object identifying the member types and bundles that are allowed to view post.
 	 */
 	 private function getPostPerms($post_id, $isChunk=false)
 	 {
 	 	global $wpdb;
 	 	
 	 	$obj = new stdClass();
 	 	$obj->member_types = array();
 	 	$obj->access_tags = array();
 	 	
 	 	$chunkSql = " and is_smart_content='0' ";
 	 	
 	 	if($isChunk)
 	 	{
 	 		$chunkSql = " and is_smart_content='1' ";
 	 	}
 	 	
 	 	$sql = "select access_type, access_id, days from ".MM_TABLE_POSTS_ACCESS." where post_id='{$post_id}' {$chunkSql}";
 	 	
 	 	$rows = $wpdb->get_results($sql);
 	 	
 	 	if(is_null($rows) || !$rows)
 	 	{
 	 		return $obj;
 	 	}
 	 	
 	 	foreach($rows as $row)
 	 	{
 	 		switch($row->access_type)
 	 		{
 	 			case "access_tag":
 	 				$obj->access_tags[$row->access_id] = $row->days;
 	 				break;
 	 				
 	 			default:
 	 				$obj->member_types[$row->access_id] = $row->days;
 	 				break;
 	 		}
 	 	}
 	 	
 	 	return $obj;
 	 }
 	 
 	 private function calculateAccessTagDaysByMember($bundleId, $userId)
 	 {
 	 	global $wpdb;
 	 	
 		$user = new MM_User($userId);
 		if($user->isAdmin())
 		{
 			$preview = MM_Preview::getData();
 			return $preview->getAppliedDays($bundleId);
 		}
 		
 	 	return $user->getDaysWithBundle($bundleId);	
 	 }
 }
