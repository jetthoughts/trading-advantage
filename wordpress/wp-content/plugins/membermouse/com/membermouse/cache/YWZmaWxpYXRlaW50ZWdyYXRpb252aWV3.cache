/**
 *
 * MemberMouse(TM) (http://www.membermouse.com)
 * (c) MemberMouse, LLC. All rights reserved.
 */
class MM_AffiliateIntegrationView extends MM_View
{
	public static $MM_JSACTION_SHOW_ADDITIONAL_OPTIONS_DIALOG = "showAdditionalOptionsDialog";
	public static $MM_JSACTION_SHOW_PROVIDER_OPTIONS = "showProviderOptions";
	public static $MM_JSACTION_SAVE_PROVIDER_OPTIONS = "saveProviderOptions";
 	
	public function performAction($post) 
	{	
		$response = parent::performAction($post);
		
		if(!($response instanceof MM_Response))
		{
			switch($post[self::$MM_JSACTION]) 
			{
				case self::$MM_JSACTION_SHOW_PROVIDER_OPTIONS:
					return $this->getProviderOptions($post);
					
				case self::$MM_JSACTION_SHOW_ADDITIONAL_OPTIONS_DIALOG:
					return $this->generateAdditionalOptionsDialog($post);
					
				case self::$MM_JSACTION_SAVE_PROVIDER_OPTIONS:
					return $this->saveProviderOptions($post);
				default:
					return new MM_Response($response);
			}
		}
		else 
		{
			return $response;
		}
	}

	public function generateAdditionalOptionsDialog($post) 
	{
		if (!isset($post['provider_token'])) 
		{
			//shouldnt ever happen
			return new MM_Response("Failed to retrieve provider options: no token was requested",MM_Response::$ERROR);
		}
		
		$provider_token = $post['provider_token'];
		$provider = MM_AffiliateProviderFactory::getProvider($provider_token);
		if ($provider != null) 
		{
			$config_response = $provider->configureFromOptions($post);
			if ($config_response->type == MM_Response::$ERROR)
			{
				return $config_response;
			}
			
			// generate HTML
			$additional_options_output = "<div style=\"width:500px;\">";
			
			$additional_options_output .= $provider->renderAdditionalOptions();
			
			if($provider->supportsFeature(MM_AffiliateProviderFeatures::AFFILIATE_ACCOUNT_CREATION))
			{
				$profiles_response = $provider->getPayoutProfiles();
				if ($profiles_response->type == MM_Response::$ERROR)
				{
					return $profiles_response;
				}
				else if (is_array($profiles_response->message) && (count($profiles_response->message) == 0))
				{
					return new MM_Response("This affiliate provider has no payout profiles configured");
				}
				$profiles = array(""=>"None") + $profiles_response->message;
					
				$encode = create_function('&$key,$val', '$key=htmlentities($key); $val=htmlentities($val);');
				array_walk($profiles,$encode); //encode html_entities so funky user data doesn't/can't break the interface
				
				// add affiliate account creation section
				$membership_mappings = $this->getCurrentMappings($provider_token);
				$membershipLvlMappingDesc = "You can optionally instruct MemberMouse to create an affiliate account when new members sign up for a particular membership level. For each membership level, select a specific payout level and when members sign up for that membership level, an affiliate account will be created with that payout level. Setting the payout level to None indicates that an affiliate account should not be created for that membership level.";
				$additional_options_output .= "<p class=\"mm-section-header\" style=\"margin-top:20px; margin-bottom:10px;\">Automatic Affiliate Account Creation <img src='".MM_Utils::getImageUrl("information")."' style='vertical-align:middle;' title='{$membershipLvlMappingDesc}' /></p>";
				
				$dataGrid = new MM_DataGrid();
				$dataGrid->showPagingControls = false;
				$dataGrid->width = "500px;";
				$rows = array();
				
				$headers = array
				(
					'membership'=> array('content' => 'Membership Level'),
					'profile'	=> array('content' => 'Payout Level')
				);
				
				foreach ($membership_mappings as $membership_id=>$membership_data) 
				{
					$rows[] = array
					(
						array( 'content' => $membership_data['membership_name']),
						array( 'content' => "<select name='membership_level_mappings[{$membership_id}]'>".MM_HtmlUtils::generateSelectionsList($profiles, $membership_data['payout_profile_id'])."</select>"),
					);
				}
				
				$dataGrid->setHeaders($headers);
				$dataGrid->setRows($rows);	
				$additional_options_output .= $dataGrid->generateHtml();
			}

			$additional_options_output .= "</div>";
			
			return new MM_Response($additional_options_output);
		}
		else 
		{
			return new MM_Response("Failed to retrieve provider configuration for {$provider_token}",MM_Response::$ERROR);
		}
	}
	
	private function getCurrentMappings($provider_token) 
	{
		global $wpdb;
		$mappings = array();
		
		//first get provider id
		$sql = "select id from ".MM_TABLE_AFFILIATE_PROVIDERS." where provider_token='%s'";
		$provider_id = $wpdb->get_col($wpdb->prepare($sql,$provider_token));
		
		//then cleanup mappings for deleted membership levels
		$sql = "delete from ".MM_TABLE_AFFILIATE_PROVIDER_MAPPINGS." where membership_level_id NOT IN (select id from ".MM_TABLE_MEMBERSHIP_LEVELS.")";
		$wpdb->query($sql);
		
		//now get membership levels
		$sql = "select id, name from ".MM_TABLE_MEMBERSHIP_LEVELS." order by name";
		$results = $wpdb->get_results($wpdb->prepare($sql,$provider_id),ARRAY_A);
		foreach ($results as $rownum=>$membership_level)
		{
			$mappings[$membership_level['id']]['membership_name'] = $membership_level['name'];
			$mappings[$membership_level['id']]['payout_profile_id'] = "";
		}
		
		//now update with any mappings present in the table
		$sql = "select membership_level_id, payout_profile_id from ".MM_TABLE_AFFILIATE_PROVIDER_MAPPINGS.
				" where affiliate_provider_id='%s'";
		$results = $wpdb->get_results($wpdb->prepare($sql,$provider_id),ARRAY_A);
		foreach ($results as $rownum=>$single_mapping) 
		{
			$membership_id = $single_mapping['membership_level_id'];
			$mappings[$membership_id]['payout_profile_id'] = $single_mapping['payout_profile_id'];
		}
		return $mappings;		
	}
	
	public function getProviderOptions($post) 
	{
		if (!isset($post['provider_token'])) 
		{
			//shouldnt ever happen
			return new MM_Response("Failed to retrieve provider options: no token was requested",MM_Response::$ERROR);
		}
		$provider_token = $post['provider_token'];
		$provider = MM_AffiliateProviderFactory::getProvider($provider_token);
		if ($provider != null) 
		{
			$call_response = $provider->renderOptionsDialog($post);
			//if call_response is an MM_Response object, return it, otherwise wrap it in an MM_Response and return it
			return ($call_response instanceof MM_Response)?$call_response:(new MM_Response($call_response,MM_Response::$SUCCESS));
		}
		else 
		{
			return new MM_Response("Failed to retrieve provider configuration for {$provider_token}",MM_Response::$ERROR);
		}
	}
	
	public function saveProviderOptions($post) 
	{
		if (!isset($post['provider_token'])) 
		{
			//shouldnt ever happen
			return new MM_Response("Failed to save provider options: no token was supplied",MM_Response::$ERROR);
		}
		$provider_token = $post['provider_token'];
		$provider = MM_AffiliateProviderFactory::getProvider($provider_token);
		if ($provider != null) 
		{
			return $provider->handleOptionsDialog($post);
		}
		else 
		{
			return new MM_Response("Unable to save provider configuration for unknown provider {$provider_token}",MM_Response::$ERROR);
		}
	}
 	
}
