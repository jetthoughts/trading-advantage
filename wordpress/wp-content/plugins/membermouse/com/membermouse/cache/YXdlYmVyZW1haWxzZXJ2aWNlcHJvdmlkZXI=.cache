/**
 * MemberMouse(TM) (http://www.membermouse.com)
 * (c) MemberMouse, LLC. All rights reserved.
 */

class MM_AWeberEmailServiceProvider extends MM_AbstractEmailServiceProvider 
{
	
	private $aweber_api;
	
	private $application_key;
	private $application_secret;
	private $access_token;
	private $access_secret;
	
	private $api_base = "https://api.aweber.com/1.0"; 
	
	/**
	 * The AWeber api requires an application key and secret, and an access token and secret. All of these are stored in additional data
	 */
	public function __construct($provider_info)
	{
		parent::__construct($provider_info);
		$additional_data = (isset($provider_info->additional_data))?unserialize($provider_info->additional_data):array();
		if (is_array($additional_data))
		{
			$required_fields = array("applicationKey","applicationSecret","accessToken","accessSecret");
			foreach ($required_fields as $aField)
			{
				if (array_key_exists($aField, $additional_data))
				{
					$setter = "set".ucfirst($aField);
					call_user_func(array($this,$setter),$additional_data[$aField]);
				}
			}
		}
		
	}
	
	/**
	 * Set the application key
	 * 
	 * @param String $key The AWeber provided application key
	 */
	public function setApplicationKey($key)
	{
		$this->application_key = $key;
	}
	
	/**
	 * Return the application key
	 * 
	 * @return String $key The AWeber provided application key
	 */
	public function getApplicationKey()
	{
		return $this->application_key;
	}
	
	/**
	 * Set the application secret
	 *
	 * @param String $key The AWeber provided application secret
	 */
	public function setApplicationSecret($secret)
	{
		$this->application_secret = $secret;
	}
	
	/**
	 * Return the application secret
	 *
	 * @return String $key The AWeber provided application secret
	 */
	public function getApplicationSecret()
	{
		return $this->application_secret;
	}
	
	/**
	 * Set the access token
	 *
	 * @param String $key The AWeber provided access token
	 */
	public function setAccessToken($token)
	{
		$this->access_token = $token;
	}
	
	/**
	 * Return the access token
	 *
	 * @return String $key The AWeber provided access token
	 */
	public function getAccessToken()
	{
		return $this->access_token;
	}
	
	/**
	 * Set the access secret
	 *
	 * @param String $key The AWeber provided access secret
	 */
	public function setAccessSecret($secret)
	{
		$this->access_secret = $secret;
	}
	
	/**
	 * Return the access secret
	 *
	 * @return String $key The AWeber provided access secret
	 */
	public function getAccessSecret()
	{
		return $this->access_secret;
	}
	
	/**
	 *
	 * Gets the member data to merge. Currently this is the name and any access tags
	 * @param String $email The email address of the member
	 * @return MM_Response containing an array of data as key-value pairs on success, MM_Response containing the error state otherwise
	 */
	private function getMemberDataToMerge($email)
	{
		$user = MM_User::findByEmail($email);
		
		if (!$user->isValid())
		{
			return new MM_Response("Error retrieving user information for {$email}",MM_Response::$ERROR);
		}
	
		$merge_data = array();
	
		// set all bundles false to start
		foreach (MM_Bundle::getBundleShortNames() as $reqTag=>$reqName)
		{
			$reqTag = strtoupper($reqTag);
			$merge_data[$reqTag] = "FALSE";
		}
	
		// now set the ones the user has equal to true
		$appliedBundles = $user->getAppliedBundles();
	
		foreach ($appliedBundles as $appliedBundle)
		{
			$bundle = $appliedBundle->getBundle();
			
			if($bundle->isValid())
			{
				$shortName = strtoupper($bundle->getShortName());
				$merge_data[$shortName] = "TRUE";
			}
		}
		return new MM_Response($merge_data);
	}
	
	/**
	 * Adds a member to a list
	 * @see MM_AbstractEmailServiceProvider::addMemberToList()
	 * @param $email String The email address to add to the list
	 * @param $listId String The id of the list
	 * @return MM_Response indicating success or failure
	 */
	public function addMemberToList($email,$listId) 
	{
		$member = MM_User::findByEmail($email);
		
		if (!$member->isValid())
		{
			return new MM_Response("Could not find member with email {$email}",MM_Response::$ERROR);
		}
		
		try
		{
			$this->addRequiredCustomFields($listId);
			
			$md_response = $this->getMemberDataToMerge($email);
			
			if ($md_response->type == MM_Response::$ERROR) 
			{
				return $md_response;
			}
			
			$member_custom_fields = (is_array($md_response->message))?$md_response->message:array();
			
			$aweber = $this->getAPIReference();
			$account = $aweber->getAccount($this->access_token,$this->access_secret);
			$list = $account->loadFromUrl("{$this->api_base}/accounts/{$account->id}/lists/{$listId}");
			
			$member_name = $member->getFirstName()." ".$member->getLastName();
			
			# create a subscriber
		    $params = array('email' => $email,
		        			'ip_address' => '127.0.0.1',
		       			    'misc_notes' => 'added by MemberMouse',
		        			'name' => $member_name
		    );
		    
		    if (count($member_custom_fields) >0)
		    {
		    	$params['custom_fields'] = $member_custom_fields;
		    }
	    	
			$subscribers = $list->subscribers;
	   	 	$new_subscriber = $subscribers->create($params);
			
			return new MM_Response();
		}
		catch (Exception $e)
		{
			return new MM_Response("Error adding member to list: ".$e->getMessage(),MM_Response::$ERROR);
		}
	}
	
	/**
	 * Changes a members list subscription based on a change in membership level. 
	 * In the case of AWeber, performs a one-operation move
	 * 
	 * @see MM_AbstractEmailServiceProvider::changeMembershipLevel()
	 * @param $email String The email address of the member to be updated
	 * @param $newMemberType int The member type id of the member's new member type
	 * @return MM_Response indicating success or failure
	 */
	public function changeMembershipLevel($email,$newMemberType) 
	{
		//step 1: get the member's current information
		$member = MM_User::findByEmail($email);
		
		if (!$member->isValid()) 
		{
			return new MM_Response("Could not find member with email {$email}",MM_Response::$ERROR);
		}
		
		//step 2: deal with the 3 possible scenarios - 
		//a. the member is not currently subscribed to a list, but the new membertype has a list 
		//b. the member is subscribed to a list, but the new member type does NOT have a list
		//c. the member is subscribed to a list, and their new member type has a different list
		//d. the list for the old and new member types are the same, in which update and return true
		
		//get the old list
		$oldListId = $member->getSubscribedListId();
		
		//get the new list
		$newListId = (empty($newMemberType))?$this->getListIdForMember($email):$this->getListIdForMembershipLevel($newMemberType);
		if ($newListId->type == MM_Response::$ERROR)
		{
			return new MM_Response($newListId->message,MM_Response::$ERROR);
		}
		$newListId = $newListId->message;
		
		if (empty($oldListId))
		{
			//the member was previously not subscribed to a list, so this is a simple add operation - fulfills condition a.
			return $this->addMemberToList($email, $newListId);
		}
		
		if (empty($newListId))
		{
			//there is an oldListId, but not a destination (newListId), which means its a simple remove operation - fulfills condition b
			return $this->removeMemberFromList($email, $oldListId);
		}
		
		if ($oldListId == $newListId)
		{
			//list is the same, update member and return - condition d.
			return $this->updateMember($email, $oldListId);
		}
		
		try 
		{
			$aweber = $this->getAPIReference();
			$account = $aweber->getAccount($this->access_token,$this->access_secret);
		}
		catch (Exception $e)
		{
			//no use continuing if we cant even connect
			return new MM_Response("Error changing membership: {$e->getMessage()}",MM_Response::$ERROR);
		}
		
		$oldListExists = true;
		$newListExists = true;
		
		try 
		{
			//test the old list to make sure its still there
			$oldList = $aweber->loadFromUrl("https://api.aweber.com/1.0/accounts/{$account->id}/lists/{$oldListId}/");
		}
		catch (MM_AWeberAPIException $exc)
		{
			if ($exc->type == "NotFoundError")
			{
				//if the user deleted the list, thats ok
				$oldListExists = false;
			}
			else 
			{
				//any other error should be reported
				return new MM_Response($exc->getMessage(),MM_Response::$ERROR);
			}
		}
		
		try
		{
			//test the new list to make sure its still there
			$newList = $aweber->loadFromUrl("https://api.aweber.com/1.0/accounts/{$account->id}/lists/{$newListId}/");
		}
		catch (MM_AWeberAPIException $exc)
		{
			if ($exc->type == "NotFoundError")
			{
				//if the user deleted the list, thats ok
				$newListExists = false;
			}
			else
			{
				//any other error should be reported
				return new MM_Response($exc->getMessage(),MM_Response::$ERROR);
			}
		}
		
		if (!$oldListExists && $newListExists)
		{
			return $this->addMemberToList($email, $newListId);  //source list was [probably] deleted, making this condition a
		}
		
		if ($oldListExists && !$newListExists)
		{
			return $this->removeMemberFromList($email, $oldListId); //destination list was [probably] deleted making this condition b
		}
		
		try 
		{
			//if execution reaches here, there is a oldListId and a newListId, so find the subscriber and process the move - fulfills condition c.
			$params = array('email' => $email);
			$oldListSubscribers = $oldList->subscribers;
			$theMemberCollection = $oldListSubscribers->find($params); //even though a collection is returned, there will be 0 or 1 results when searching by email
			foreach ($theMemberCollection as $theMember)
			{
				$this->updateMember($email, $oldListId); //now sync any custom field changes
				$theMember->move($newList);
			}
			return new MM_Response();
		}
		catch (Exception $e)
		{
			return new MM_Response($e->getMessage(),MM_Response::$ERROR);
		}
	}
	
	public function configureFromOptions($optionData) 
	{
		//nothing to do here
		return new MM_Response();
	}
	
	/**
	 * getLists returns all the lists associated with the connected AWeber account
	 * @see MM_AbstractEmailServiceProvider::getLists()
	 * 
	 * @return MM_Response An MM_Response containing an array of list names (keyed by list id) as the message
	 */
	public function getLists() 
	{
		try 
		{
			$aweber = $this->getAPIReference();
			$account = $aweber->getAccount($this->access_token, $this->access_secret);
			$lists = array();
			foreach ($account->lists as $list)
			{
				$list_id = (String)$list->id;
				$list_name = (String)$list->name;
				$lists[$list_id] = $list_name;
			}
			return new MM_Response($lists);
		}
		catch (Exception $e)
		{
			return new MM_Response("Error retrieving lists from AWeber. Please check that MemberMouse is still authorized (or reauthorize) and try again",MM_Response::$ERROR);
		}
	}
	
	
	/**
	 * Responds to data collected from the form rendered by renderOptionsDialog
	 * @see MM_AbstractEmailServiceProvider::handleOptionsDialog()
	 * @param $optionData Array containing the posted values
	 * @return MM_Response object indicating success or failure
	 */
	public function handleOptionsDialog($optionData) 
	{
	
		if (!empty($this->application_key) && !empty($this->application_secret) && !empty($this->access_token) && !empty($this->access_secret)) 
		{
			
			$provider_token = $optionData['provider_token'];
			
			$prospect_list_id = $optionData['prospect_list_id'];
			$cancellation_list_id = $optionData['cancellation_list_id'];
			
			$provider_entity = new MM_EmailServiceProvider();
			$provider_entity->setToken($provider_token);
			$provider_entity->getData();
			if ($provider_entity->isValid()) 
			{
				//first write the provider's unsaved configuration options
				$provider_entity->setActive(true);
				$provider_entity->setProspectListID($prospect_list_id);
				$provider_entity->setCancellationListID($cancellation_list_id);
				$commit_response = $provider_entity->commitData();
				if ($commit_response->type == MM_Response::$ERROR) 
				{
					//pass through errors committing to the database
					return $commit_response;
				}
				//now write the list mappings
				if (isset($optionData['member_type_mappings']) && is_array($optionData['member_type_mappings'])) 
				{
					$provider_id = $provider_entity->getId(); 
					return $this->persistListMappings($provider_id,$optionData['member_type_mappings']);
				}
			}
			else 
			{
				//failed to load entity from table
				return new MM_Response("Failed to save settings",MM_Response::$ERROR);
			}
		}
		else 
		{
			//invalid credentials or the token has expired/become invalidated
			return new MM_Response("Invalid credentials: Please authorize MemberMouse to access your AWeber account",MM_Response::$ERROR);
		}
		
	}

	/**
	 * Removes a member from a list
	 * @see MM_AbstractEmailServiceProvider::removeMemberFromList()
	 * @param $email String The email address to remove from the list
	 * @param $listId String The id of the list
	 * @return MM_Response indicating success or failure
	 */
	public function removeMemberFromList($email, $listId)  
	{
		if (empty($listId)) 
		{
			return new MM_Response();
		}
	
		try 
		{
			$aweber = $this->getAPIReference();
			$account = $aweber->getAccount($this->access_token,$this->access_secret);
			$list = $aweber->loadFromUrl("{$this->api_base}/accounts/{$account->id}/lists/{$listId}");
			$subscribers = $list->subscribers;
			
			$results = $subscribers->find(array("email"=>$email));
			foreach ($results as $the_member) //returns a collection, but should never be more than one member
			{
				$the_member->status = "unsubscribed";
				$the_member->save();
			}
			return new MM_Response();
		}
		catch (Exception $e)
		{
			return new MM_Response("Error removing member from list:".$e->getMessage(),MM_Response::$ERROR);
		}
	}
	
	/**
	 * Updates a members information attached to a subscribed list
	 * 
	 * @see MM_AbstractEmailServiceProvider::updateMember()
	 * @param $email String The email of the member to be updated
	 * @param $listId String The id of the list where the member's subscription info should be updated
	 * @param $newEmail String (optional) - The member's new email in the case where the update is an email address change
	 */
	public function updateMember($email, $listId,$newEmail="") 
	{
		if (empty($listId))
		{
			return new MM_Response(); //no list was passed in, so success
		}
		$this->addRequiredCustomFields($listId);
		$cf_response = $this->getMemberDataToMerge(empty($newEmail)?$email:$newEmail);
		if ($cf_response->type == MM_Response::$ERROR)
		{
			return $cf_response;
		}
		$custom_fields = $cf_response->message;
		
		
		if (is_array($custom_fields))
		{
			try 
			{
				$aweber = $this->getAPIReference();
				$account = $aweber->getAccount($this->access_token,$this->access_secret);
				$list = $aweber->loadFromUrl("{$this->api_base}/accounts/{$account->id}/lists/{$listId}");
				$results = $list->subscribers->find(array("email"=>$email));
				
				foreach ($results as $the_member) //returns a collection, but should never be more than one member
				{
					foreach ($custom_fields as $k=>$v)
					{
						$the_member->custom_fields[$k] = $v;
					}
					$the_member->save();
				}
			}
			catch (Exception $e)
			{
				return new MM_Response($e->getMessage(),MM_Response::$ERROR);
			}
		}
		return new MM_Response();
	}
	
	/**
	 * Return a DHTML/Javascript dialog capable of collecting the options needed to configure the provider
	 * 
	 * @return String the markup for the options dialog
	 */
	public function renderOptionsDialog($post)
	{
		if (!isset($post['aweber_action']))
		{
			return $this->displayAuthorizationRequestScreen($post);
		}
		else 
		{
			switch ($post['aweber_action'])
			{
				case 'validateCredentials':
					return $this->validateCredentials($post);
					break;
				case 'dumpCredentials':
					$this->dumpCredentials($post);
					return $this->displayAuthorizationRequestScreen($post);
					break;
				default:
					return $this->displayAuthorizationRequestScreen($post);
					break;
			}
		}
	}
	
	/**
	 * Displays a screen providing the user the ability to connect to AWeber and authorize MemberMouse to interact with their account
	 * If there is a saved connection with AWeber, the results of a call to validateCredentials is returned
	 * 
	 * @return MM_EmailServiceProviderDialog Contains the form and controls to be displayed
	 */
	public function displayAuthorizationRequestScreen()
	{
		if ($this->testCredentials())
		{
			return $this->validateCredentials(array());
		}
		$form = new MM_EmailServiceProviderDialog();
		$form->dialog = <<<OPTIONS
		<div id="mm-provider-config-options" style="width:500px;">
		<a href="#" onClick="javascript:window.open('https://auth.aweber.com/1.0/oauth/authorize_app/fe42c11e','oauth','width=800,height=600,menubar=yes,location=yes,resizable=yes,scrollbars=yes,status=yes');">Click here to authorize MemberMouse to access your AWeber account</a><br/>
		In the window that pops up, enter your username and password and click Allow Access. You will be presented with an authentication
		code, which you will need to copy and paste below <br/><br/>
		<input type="text" name="authentication_code" size="75">
		<input type="hidden" name="aweber_action" value="validateCredentials">
		</div>
OPTIONS;
		$form->controls = <<<CONTROLS
		<button id="email-service-provider-configure" class="mm-button blue small" onClick="mmjs.showNewProviderOptions(jQuery('#provider-config-form :input').serializeArray()); return false;">Authorize MemberMouse</button>
		<button id="reset" class="mm-button small" style="display:none" onClick="mmjs.providerOptionsReset(); return false;">Reset</button>
CONTROLS;
		return $form;
	}
	
	/**
	 * validateCredentials determines if the authentication code the user entered in the admin panel is valid, and if so 
	 * stores the parsed out oauth credentials. A MM_EmailServiceProviderDialog containing a confirmation message and controls to 
	 * advance to the list-management screen is returned if the credentials are successfully validated
	 * 
	 * @param array $post The data posted back from the configuration page
	 * @return MM_EmailServiceProviderDialog on success, MM_Response with the error message on failure
	 */
	public function validateCredentials($post)
	{
		try
		{
			$unsavedCredentials = false;
			if (isset($post['authentication_code']))
			{
				$authcode_array = MM_AWeberAPI::getDataFromAweberID($_POST['authentication_code']);
				if ($authcode_array == null)
				{
					return new MM_Response("Invalid Authorization Code",MM_Response::$ERROR);
				}
				list($application_key,$application_secret,$access_token,$access_secret) = $authcode_array;
				$this->application_key = $application_key;
				$this->application_secret = $application_secret;
				$this->access_token = $access_token;
				$this->access_secret = $access_secret;
				$unsavedCredentials = true;
			}
		
		
			$aweber = $this->getAPIReference();
			$account = $aweber->getAccount($this->access_token, $this->access_secret);
			$account_id = $account->id;
			
			if ($unsavedCredentials)
			{
				//if no exception thrown, the credentials are good, so save them
				$provider_entity = new MM_EmailServiceProvider();
				$provider_entity->setToken($this->getToken());
				$provider_entity->getData();
				$provider_entity->setConfigOption("applicationKey", $application_key);
				$provider_entity->setConfigOption("applicationSecret", $application_secret);
				$provider_entity->setConfigOption("accessToken", $access_token);
				$provider_entity->setConfigOption("accessSecret", $access_secret);
				$provider_entity->commitData();
			}
		}
		catch (Exception $e)
		{
			return new MM_Response($e->getMessage(),MM_Response::$ERROR);
		}
		
		$form = new MM_EmailServiceProviderDialog();
		$form->dialog = <<<OPTIONS
		<div id="mm-provider-config-options">
		MemberMouse is connected to AWeber account {$account_id}.<br/>
		<a onClick="javascript:jQuery('#provider_token').removeAttr('disabled'); jQuery('#aweber_action').val('dumpCredentials'); mmjs.showNewProviderOptions(jQuery('#provider-config-form :input').serializeArray()); return false;">Click here to un-authenticate</a>
		<input id='aweber_action' type='hidden' name='aweber_action' value=''/>
		</div>
OPTIONS;
		return $form;
	}
	
	protected function getAPIReference()
	{
		if (!isset($this->aweber_api) || !($this->aweber_api instanceof MM_AWeberAPI))
		{
			$this->aweber_api = new MM_AWeberAPI($this->application_key, $this->application_secret);
		}
		return $this->aweber_api;
	}
	
	/**
	 * testCredentials attempts to use the stored oauth credentials to connect and retrieve the account object
	 * It is assumed that failure means that the stored credentials are invalid, although this could also be caused by a connection error
	 * This method could be improved by detecting the specific exceptions related to authorization problems
	 * 
	 * @return boolean true on success, false on failure
	 */
	private function testCredentials()
	{
		if (empty($this->application_key) || empty($this->application_secret) || empty($this->access_token) || empty($this->access_secret))
		{
			return false;
		}
		
		try 
		{
			$aweber = $this->getAPIReference();
			$aweber->getAccount($this->access_token,$this->access_secret);
			return true;
		}
		catch (Exception $e)
		{
			return false;
		}
	}
	
	/**
	 * dumpCredentials removes stored oauth keys, secrets, and tokens
	 */
	private function dumpCredentials()
	{
		$provider_entity = new MM_EmailServiceProvider();
		$provider_entity->setToken($this->getToken());
		$provider_entity->getData();
		$provider_entity->deleteConfigOption("applicationKey");
		$provider_entity->deleteConfigOption("applicationSecret");
		$provider_entity->deleteConfigOption("accessToken");
		$provider_entity->deleteConfigOption("accessSecret");
		$provider_entity->commitData();
		
		$this->application_key = "";
		$this->application_secret = "";
		$this->access_token = "";
		$this->access_secret = "";
	}	
	
	/**
	 *
	 * Adds custom fields to the list if they are not already present. Currently used to add access tags
	 * @param String $listId The id of the list to add the merge vars to
	 */
	private function addRequiredCustomFields($listId)
	{
		//get existing custom fields
		$aweber = $this->getAPIReference();
		$account = $aweber->getAccount($this->access_token, $this->access_secret);
		$custom_fields =  $aweber->loadFromUrl("{$this->api_base}/accounts/{$account->id}/lists/{$listId}/custom_fields");
		$cfCache = array();
		foreach($custom_fields as $custom_field)
		{
			$cfCache[$custom_field->name] = $custom_field->name;
		}
		
		foreach (MM_Bundle::getBundleShortNames() as $reqTag=>$reqName)
		{
			$reqTag = strtoupper($reqTag); //make the shortname uppercase to standardize with other ESPs
			if (!isset($cfCache[$reqTag]))
			{
				//add this custom field to the list
				$custom_fields->create(array("name"=>$reqTag));
			}
		}
		
	}
}
