/**
 * 
 * MemberMouse(TM) (http://www.membermouse.com)
 * (c) MemberMouse, LLC. All rights reserved.
 */
class MM_CommissionProfilesView extends MM_View
{
	public static $MM_JSACTION_SET_DEFAULT = "setDefault";
	
	public function performAction($post) 
	{	
		$response = parent::performAction($post);
		
		if(!($response instanceof MM_Response))
		{
			switch($post[self::$MM_JSACTION]) 
			{
				case self::$MM_JSACTION_SAVE:
					return $this->saveCommissionProfile($post);
					
				case self::$MM_JSACTION_REMOVE:
					return $this->removeCommissionProfile($post);
					
				case self::$MM_JSACTION_SET_DEFAULT:
					return $this->setAsDefault($post);
					
				default:
					return new MM_Response($response);
			}
		}
		else 
		{
			return $response;
		}
	}
	
	public function getData(MM_DataGrid $dg)
	{
		global $wpdb;
		
		$rows = parent::getData(MM_TABLE_COMMISSION_PROFILES, null, $dg);
		return $rows;
	}
	
	private function saveCommissionProfile($post)
	{	
		$profile = new MM_CommissionProfile();
		
		if(isset($post["id"]) && intval($post["id"]) > 0) 
		{
			$profile = new MM_CommissionProfile($post["id"]);
			
			if(!$profile->isValid())
			{
				return new MM_Response("Cannot update commission profile. Invalid ID '{$post['id']}' passed.", MM_Response::$ERROR);
			}
		}
	 	
		$profile->setName($post["mm_display_name"]);
	 	$profile->setDescription($post["mm_description"]);
	 	$profile->setInitialCommissionFlag($post["mm_enable_initial_commission"]);
	 	$profile->setRebillCommissionsFlag($post["mm_enable_rebill_commissions"]);
	 	$profile->setDoLimitRebillsFlag($post["mm_limit_rebill_commissions"]);
	 	$profile->setDoReverseCommissionsFlag($post["mm_enable_reverse_commissions"]);
	 	$profile->setRebillCommissionType($post["mm_rebill_commission_type"]);
	 	$profile->setRebillCommissionValue($post["mm_rebill_commission_value"]);
	 	$profile->setRebillCommissionLimit($post["mm_limit_rebill_commission_value"]);
		
		return $profile->commitData();
	}
	
	private function removeCommissionProfile($post)
	{
		if(isset($post["id"]) && intval($post["id"]) > 0)
		{
			$profile = new MM_CommissionProfile($post["id"], false);
			$result = $profile->delete();
			
			if($result) 
			{
				return new MM_Response();
			} 
			else 
			{
				return new MM_Response("This commission profile has existing associations and can't be removed.", MM_Response::$ERROR);
			}
		}
		
		return new MM_Response("Unable to delete commission profile. No ID specified.", MM_Response::$ERROR);
	}
	
 	private function setAsDefault($post)
	{
		global $wpdb;
		
		if(isset($post["id"]) && intval($post["id"]) > 0)
		{
			$sql = "update ".MM_TABLE_COMMISSION_PROFILES." set is_default='0'";
			$wpdb->query($sql);
			
			$sql = "update ".MM_TABLE_COMMISSION_PROFILES." set is_default='1' where id='%d' limit 1";
			$results = $wpdb->query($wpdb->prepare($sql, $post["id"]));
			
			if($results)
			{
				return new MM_Response();
			}
		}
		
		return new MM_Response("Unable to set commission profile as default. No ID specified.", MM_Response::$ERROR);
	}
}
