/**
 *
 * MemberMouse(TM) (http://www.membermouse.com)
 * (c) MemberMouse, LLC. All rights reserved.
 *
 * The MM_RepairMemberMouseView class handles the ajax requests from the "Repair Membermouse" page. This operation essentially consists of the original
 * source archive for the running version of the plugin being downloaded into the cache directory, extracted, and then used to overwrite
 * local files which may have been corrupted or modified
 */
class MM_RepairMemberMouseView extends MM_View {
	
	public static $MM_JSACTION_FETCH_SOURCE_ARCHIVE = "fetchSourceArchive";
	public static $MM_JSACTION_REPAIR_FROM_ARCHIVE = "repairFromArchive";
	
	public function performAction($post)
	{
		$response = parent::performAction($post);
	
		if(!($response instanceof MM_Response))
		{
			switch($post[self::$MM_JSACTION])
			{
				case self::$MM_JSACTION_FETCH_SOURCE_ARCHIVE:
					return $this->fetchSourceArchive($post);
				case self::$MM_JSACTION_REPAIR_FROM_ARCHIVE:
					return $this->repairFromArchive($post);
				default:
					return new MM_Response($response);
			}
		}
		else
		{
			return $response;
		}
	}
	
	/**
	 * Retrieves the source archive from MemberMouse Central for the currently running version of the plugin
	 * 
	 * @param Array $post Data POSTed as part of the request
	 * @return instance of MM_Response indicating success or failure. On error, the message variable of the MM_Response is an 
	 * 		   array containing more details
	 */
	public function fetchSourceArchive($post)
	{
		//make sure cache is still writeable
		if (!MM_Utils::cacheIsWriteable())
		{
			return new MM_Response(array("status"=>"cache_not_writeable"),MM_Response::$ERROR);
		}
		
		$cacheDir = MM_Utils::getCacheDir();
		$repair_archive = "{$cacheDir}/repair_archive.zip";
		
		if (!file_exists($repair_archive))
		{	
			//use curl to retrieve the source archive
			$version = MM_MemberMouseService::getPluginVersion();
			$url  = "http://hub.membermouse.com/major-versions/{$version}.zip";		
			
			if (!$this->urlExists($url))
			{
				$status = array("status"=>"remote_archive_doesnt_exist","url"=>$url);
				return new MM_Response($status,MM_Response::$ERROR);
			}
			
			$fp = fopen($repair_archive, 'w');
			
			$ch = curl_init($url);
			curl_setopt($ch, CURLOPT_FILE, $fp);
			$data = curl_exec($ch);
			
			curl_close($ch);
			fclose($fp);
			//TODO: error-check the curl op
		}
		
		return file_exists($repair_archive)?(new MM_Response()):(new MM_Response(array("error"=>"error_retrieving_repair_archive"),MM_Response::$ERROR));				
	}	
	
	/**
	 * Attempts to repair local plugin files using the clean archive downloaded previously from MemberMouse central
	 * This will fail if the archive does not exist in the cache directory, or the webserver does not have permissions 
	 * to overwrite/create plugin files
	 * 
	 * @param Array $post An array containing data POSTed as part of the request
	 * @return instance of MM_Response indicating success or failure. On error, the message variable of the MM_Response is an 
	 * 		   array containing more details
	 */
	public function repairFromArchive($post)
	{
		$cacheDir = MM_Utils::getCacheDir();
		$repairDir = "{$cacheDir}/repair";
		$repair_archive = "{$cacheDir}/repair_archive.zip";
		
		if (!file_exists($repair_archive)) {
			return new MM_Response(array("status"=>"archive_doesnt_exist"),MM_Response::$ERROR);
		}
		
		global $wp_filesystem;
		if (!isset($wp_filesystem) || ($wp_filesystem == null))
		{
			WP_Filesystem();
		}
		unzip_file($repair_archive,$repairDir);
		
		if (!is_dir($repairDir))
		{
			return new MM_Response(array("status"=>"error_extracting_archive"),MM_Response::$ERROR);
		}
		
		$source_dir = "{$repairDir}/membermouse";
		$dest_dir = ABSPATH."wp-content/plugins/".MM_PLUGIN_NAME;
		
		$iterator = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($repairDir), RecursiveIteratorIterator::SELF_FIRST);
	    $operation_status = true;
	    foreach ($iterator as $path) 
	    {
	      $cur_dest = str_replace("$source_dir","$dest_dir",$path->__toString());
	      if ($path->isDir()) 
	      {
	         if (!is_dir($cur_dest))
	         {
	         	$operation_status = $operation_status && mkdir($cur_dest,"",true);
	         }
	      } 
	      else 
	      {
	      	//must be a file, copy
	      	$operation_status = $operation_status && copy($path->__toString(),$cur_dest);
	      }
	    }
	    
	    if ($operation_status == true)
	    {
	    	return new MM_Response();
	    }
	    else
	    {
	    	return new MM_Response(array("status"=>"error_updating_files"),MM_Response::$ERROR);
	    }
	}
	
	/**
	 * Method taken from the examples on php.net to detect if a url exists
	 * 
	 * @param String $url The url to test. Assumed to be a valid URI
	 * @return boolean true or false depending on whether the url exists
	 */
	private function urlExists($url) 
	{
	    $handle = curl_init($url);
	    if (false === $handle)
	    {
	        return false;
	    }
	    curl_setopt($handle, CURLOPT_HEADER, false);
	    curl_setopt($handle, CURLOPT_FAILONERROR, true);  
	    curl_setopt($handle, CURLOPT_HTTPHEADER, Array("User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.15) Gecko/20080623 Firefox/2.0.0.15") ); // request as if Firefox    
	    curl_setopt($handle, CURLOPT_NOBODY, true);
	    curl_setopt($handle, CURLOPT_RETURNTRANSFER, false);
	    $connectable = curl_exec($handle);
	    curl_close($handle);   
	    return $connectable;
	}
	
}
