/**
 *
 * MemberMouse(TM) (http://www.membermouse.com)
 * (c) MemberMouse, LLC. All rights reserved.
 */
class MM_Messages
{
	public static $KEY_HIDE_COMMAND = "mm-hide-message";
	public static $HIDE_OPTION_PREFIX = "mm-hide-message-";
	
	public static function addError($str)
	{
		$errors = MM_Session::value(MM_Session::$KEY_ERRORS);
	
		
		if(empty($errors) || !is_array($errors)) 
		{
			$errors = array();
		}
		
		if(!in_array($str, $errors))
		{
			$errors[] = $str;
		}
		
		MM_Session::value(MM_Session::$KEY_ERRORS, $errors);
	}
	
	public static function addMessage($str)
	{
		$msgs = MM_Session::value(MM_Session::$KEY_MESSAGES);
			
		if(!$msgs) {
			$msgs = array();
		}
		
		$msgs[] = $str;
		
		MM_Session::value(MM_Session::$KEY_MESSAGES, $msgs);
	}
	
	public static function get($key)
	{
		return MM_Session::value($key);
	}
	
	public static function clear()
	{
		MM_Session::clear(MM_Session::$KEY_ERRORS);
		MM_Session::clear(MM_Session::$KEY_MESSAGES);
	}
	
	public static function getHideMessageUrl($url, $key)
	{
		return MM_Utils::appendUrlParam($url, self::$KEY_HIDE_COMMAND, $key);
	}
	
	public static function isMessageHidden($key)
	{
		$isHidden = "0";
		
		// store hide message command
		if(isset($_GET[self::$KEY_HIDE_COMMAND]))
		{
			update_option(self::$HIDE_OPTION_PREFIX.$_GET[self::$KEY_HIDE_COMMAND], "1");
			$key = $_GET[self::$KEY_HIDE_COMMAND];
		}
		
		$isHidden = get_option(self::$HIDE_OPTION_PREFIX.$key);
		
		if($isHidden == "1")
		{
			return true;
		}
		
		return false;
	}
}
