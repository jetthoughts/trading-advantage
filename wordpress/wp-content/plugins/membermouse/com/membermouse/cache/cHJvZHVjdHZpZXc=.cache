/**
 * 
 * MemberMouse(TM) (http://www.membermouse.com)
 * (c) MemberMouse, LLC. All rights reserved.
 */
class MM_ProductView extends MM_View
{	
	public function performAction($post) 
	{	
		$response = parent::performAction($post);
		
		if(!($response instanceof MM_Response))
		{
			switch($post[self::$MM_JSACTION]) 
			{
				case self::$MM_JSACTION_SAVE:
					return $this->saveProduct($post);
					
				case self::$MM_JSACTION_REMOVE:
					return $this->removeProduct($post);
					
				case self::$MM_JSACTION_SHOW_BUY_NOW_LINKS:
					return $this->showPurchaseLinks($post);
					
				default:
					return new MM_Response($response);
			}
		}
		else 
		{
			return $response;
		}
	}
	
	public function getViewData(MM_DataGrid $dg)
	{
		global $wpdb;
		$rows = parent::getData(MM_TABLE_PRODUCTS, null, $dg);
		return $rows;
	}
	
	private function saveProduct($post)
	{
		if(!preg_match("/^[0-9\.]+$/", $post["mm_price"]))
		{
			return new MM_Response("Price must be a valid number", MM_Response::$ERROR);
		}
		
		if($post["mm_trial_amount"]!="" && !preg_match("/^[0-9\.]+$/", $post["mm_trial_amount"]))
		{
			return new MM_Response("Trial amount must be a valid number", MM_Response::$ERROR);
		}
		
		if($post["mm_trial_duration"]!="" && !preg_match("/^[0-9]+$/", $post["mm_trial_duration"]))
		{
			return new MM_Response("Trial duration must be a valid number", MM_Response::$ERROR);
		}
		
		if($post["mm_rebill_period"]!="" && !preg_match("/^[0-9]+$/", $post["mm_rebill_period"]))
		{
			return new MM_Response("Rebill preiod must be a valid number", MM_Response::$ERROR);
		}
		
		if($post["mm_number_of_payments"]!="" && !preg_match("/^[0-9]+$/", $post["mm_number_of_payments"]))
		{
			return new MM_Response("Number of payments must be a valid number", MM_Response::$ERROR);
		}
		
		if($post["mm_is_recurring_val"] != "1")
		{
			$post["mm_rebill_period"] = "0";
			$post["mm_rebill_frequency"] = "";
		}
		
		//if a product has a trial, there must be at least one recurring billing, so ensure that all products with trials are configured as subscriptions
		if (($post["mm_has_trial_val"] == "1") && ($post["mm_is_recurring_val"] != "1"))
		{
			return new MM_Response("Products with a trial must be configured as Subscription products",MM_Response::$ERROR);
		}
		
		if($post["mm_status"] == "active")
		{
			$post["mm_status"] = "1";
		}
		else
		{
			$post["mm_status"] = "0";
		}
		
		$isUpdate = false;
		if(isset($post["mm_id"]) && intval($post["mm_id"]) > 0)
		{
			$product = new MM_Product($post["mm_id"]);
			if ($product->isValid())
			{
				$isUpdate = true;
			}
		}
		else
		{
			$product = new MM_Product();
		}
		
		$product->setName($post["mm_name"]);
		$product->setStatus($post["mm_status"]);
		$product->setSku($post["mm_sku"]);
		$product->setIsShippableFlag($post["mm_is_shippable_val"]);
		$product->setHasTrialFlag($post["mm_has_trial_val"]);
		$product->setTrialAmount($post["mm_trial_amount"]);
		$product->setTrialDuration($post["mm_trial_duration"]);
		
		if(isset($post["mm_purchase_confirmation_message"]))
		{
			$product->setPurchaseConfirmationMessage($post["mm_purchase_confirmation_message"]);
		}
		
		$product->setDescription($post["mm_description"]);
		$product->setPrice($post["mm_price"]);
		$product->setRebillPeriod($post["mm_rebill_period"]);
		$product->setRebillFrequency($post["mm_rebill_frequency"]);
		$product->setTrialFrequency($post["mm_trial_frequency"]);
		
		if((isset($post["mm_do_limit_payments"]) && intval($post["mm_do_limit_payments"]) == 1) 
				&& (isset($post["mm_number_of_payments"]) && intval(isset($post["mm_number_of_payments"])) > 0))
		{
			$product->setLimitPaymentsFlag(1);
			$product->setNumberOfPayments(intval($post["mm_number_of_payments"]));
		}
		else
		{
			$product->setLimitPaymentsFlag(0);
			$product->setNumberOfPayments(0);
		}
		
		$product->setCommissionProfileId($post["mm_commission_profile_selector"]);
		
		$response = $product->commitData();
		
		if ($response->type == MM_Response::$ERROR) 
		{
			return $response;
		}
	
		// set partner payouts
		$product->deletePartners();
		
		foreach($post as $key => $value)
		{
			if(strpos($key, 'mm_partner_') === 0)
			{
				$partnerId = str_replace("mm_partner_", "", $key);
				$affiliateId = $value;
				$commissionProfileId = $post["mm_commission_profile_{$partnerId}"];
				
				if(empty($commissionProfileId))
				{
					$commissionProfileId = MM_CommissionProfile::$DFLT_COMMISSION_PROFILE_ID;
				}

				if(!empty($affiliateId))
				{
					$product->addPartner($affiliateId, $commissionProfileId);
				}
			}
		}
		
		// remove old access association (if any)
		if(isset($post["mm_last_associated_access_type"]))
		{
			if($post["mm_last_associated_access_type"] == "membership")
			{
				if(isset($post["mm_last_associated_access_id"]))
				{
					$membership = new MM_MembershipLevel($post["mm_last_associated_access_id"]);
						
					if($membership->isValid())
					{
						// check if this is the last product associated with the membership level
						$products = $membership->getProductIds();
						
						if((isset($post["mm_associated_access_value"]) && $post["mm_associated_access_value"] == "none" && count($products) == 1))
						{
							return new MM_Response("Cannot remove '{$product->getName()}' from '{$membership->getName()}' because it is a paid membership level and this is the only product associated with it.\n\nIf you want to disassociate this product, go to the membership level and change it to a free membership level.", MM_Response::$ERROR);
						}
						else
						{
							$membership->removeProduct($product->getId());
						}
					}
				}
			}
			else if($post["mm_last_associated_access_type"] == "bundle")
			{
				if(isset($post["mm_last_associated_access_id"]))
				{
					$bundle = new MM_Bundle($post["mm_last_associated_access_id"]);
						
					if($bundle->isValid())
					{
						// check if this is the last product associated with the bundle
						$products = $bundle->getAssociatedProducts();
						
						if((isset($post["mm_associated_access_value"]) && $post["mm_associated_access_value"] == "none" && count($products) == 1))
						{
							return new MM_Response("Cannot remove '{$product->getName()}' from '{$bundle->getName()}' because it is a paid bundle and this is the only product associated with it.\n\nIf you want to disassociate this product, go to the bundle and change it to a free bundle.", MM_Response::$ERROR);
						}
						else
						{
							$bundle->removeProduct($product->getId());
						}
					}
				}
			}
		}
		
		// add new access association
		if(isset($post["mm_associated_access_value"]))
		{
			if($post["mm_associated_access_value"] == "membership")
			{
				if(isset($post["mm_membership_access_selector"]))
				{
					$membership = new MM_MembershipLevel($post["mm_membership_access_selector"]);
					
					if($membership->isValid())
					{
						$membership->removeProduct($product->getId());
						$membership->addProduct($product->getId());
					}
				}
			}
			else if($post["mm_associated_access_value"] == "bundle")
			{
				if(isset($post["mm_bundle_access_selector"]))
				{
					$bundle = new MM_Bundle($post["mm_bundle_access_selector"]);
					
					if($bundle->isValid())
					{
						$bundle->removeProduct($product->getId());
						$bundle->addProduct($product->getId());
					}
				}
			}
		}
		
		$mediator = new MM_PaymentServiceMediator();
		$response = (!$isUpdate)?$mediator->notifyProductAdded($product):$mediator->notifyProductUpdated($product);
		
		if ($response->type == MM_Response::$ERROR)
		{
			if (!$isUpdate)
			{
				//if a payment service blocks addition of a product, remove the newly created product
				//however if its an update on the payment service side that fails, keep the changes and simply notify the user
				$product->remove(); 
			}
			return $response;
		}
		
		return new MM_Response();	
	}
	
	private function removeProduct($post)
	{
		if(!isset($post["id"]))
		{
			return new MM_Response("ID is required", MM_Response::$ERROR);
		}
		
		$product = new MM_Product($post["id"]);
		
		$mediator = new MM_PaymentServiceMediator();
		$response = $mediator->notifyProductRemoved($product);
		
		if ($response->type == MM_Response::$ERROR)
		{
			return $response;
		}
		
		if($product->remove())
		{
			return new MM_Response();
		}
		
		return new MM_Response("Product could not be removed due to existing associations", MM_Response::$ERROR);
	}
	
	private function showPurchaseLinks($post)
	{
		if(isset($post["product_id"]) && isset($post["product_name"]))
		{
			$data = new stdClass();
			$data->productName = stripslashes($post["product_name"]);
			$data->smartTag = "<a href=\"[MM_Purchase_Link productId='{$post["product_id"]}']\">Buy Now</a>";
			$data->staticLink = MM_CorePageEngine::getCheckoutPageStaticLink($post["product_id"]);
			
			$content = MM_TEMPLATE::generate(MM_MODULES."/".MM_MODULE_PRODUCTS.".".MM_MODULE_PURCHASE_LINKS.".dialog.php", $data);
			return new MM_Response($content);
		}
		else
		{
			return new MM_Response("Product ID and product name are required to display purchase links", MM_Response::$ERROR);
		}
	}
	
}
