/**
 * 
 * MemberMouse(TM) (http://www.membermouse.com)
 * (c) MemberMouse, LLC. All rights reserved.
 */
class MM_VersionRelease extends MM_Entity
{
	private $version = "";

	public function getData()
	{
		parent::invalidate();
	}

	public function setData($data)
	{
		try 
		{
			$this->version = $data->version;
			parent::validate();
		}
		catch (Exception $ex) 
		{
			parent::invalidate();
		}
	}

	public function commitData()
	{
		global $wpdb;

		if(intval($this->id) > 0)
		{
			$sql = "update ".MM_TABLE_VERSION_RELEASES." set version = %s, date_modified=NOW() ".
			       "where id=%s";

			$wpdb->query($wpdb->prepare($sql,$this->version,$this->id));
			return $this->id;
		}
		else
		{
			$sql = "insert into ".MM_TABLE_VERSION_RELEASES." set version = %s, date_modified=NOW()";
			
			$wpdb->query($wpdb->prepare($sql,$this->version));
			return mysql_insert_id();
		}

		return false;
	}

	
	/** GETTERS/SETTERS **/
	
	public function getVersion()
	{
		return $this->version;
	}

	public function setVersion($val)
	{
		$this->version = $val;
	}
	
	
	/** UTILITIES **/
	
	public static function findByVersion($version)
	{
		$versionRelease = new MM_VersionRelease();
	
		global $wpdb;
		$sql = "SELECT * FROM ".MM_TABLE_VERSION_RELEASES." WHERE version='".$version."' limit 1";
		$result = $wpdb->get_row($sql);
	
		if($result)
		{
			$versionRelease->setId($result->id);
			$versionRelease->setData($result);
		}
	
		return $versionRelease;
	}
}
