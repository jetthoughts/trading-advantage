/**
 *
 * MemberMouse(TM) (http://www.membermouse.com)
 * (c) MemberMouse, LLC. All rights reserved.
 */
class MM_EventLogView extends MM_View
{
	public static $MM_JSACTION_SEARCH = "search";
	
	public function performAction($post) 
	{	
		$response = parent::performAction($post);
		
		if(!($response instanceof MM_Response))
		{
			switch($post[self::$MM_JSACTION]) 
			{
				case self::$MM_JSACTION_SEARCH:
					return $this->generateDataGrid($post);
					
				default:
					return new MM_Response($response);
			}
		}
		else 
		{
			return $response;
		}
	}
	
	public function generateDataGrid($post=null)
	{
		return MM_TEMPLATE::generate(MM_MODULES."/event_log.datagrid.php", $post);
	}
	
	public function getViewData($post, MM_DataGrid $dg)
	{
		global $wpdb;
		
		$whereClause = array();
		
		if(!empty($post["member_id"]))
		{
			array_push($whereClause, "(user_id='{$post["member_id"]}')");
		}
		
		if(!empty($post["event_type"]))
		{
			array_push($whereClause, "(event_type='{$post["event_type"]}')");
		}
		
		if(!empty($post["from_date"]))
		{
			array_push($whereClause, "(date_added >= '".date("Y-m-d G:i:s", strtotime($post['from_date']))."')");
			
			if(!empty($post["to_date"]))
			{		
				array_push($whereClause, "(date_added <= '".date("Y-m-d G:i:s", strtotime($post['to_date']))."')");
			}
		}
	
		$whereClause = join(" AND ", $whereClause);
		
		return parent::getData(MM_TABLE_EVENT_LOG, null, $dg, $whereClause);
	}
}
