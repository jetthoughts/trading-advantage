class MM_CouponView extends MM_View{
	
	public function performAction($post) 
	{	
		$response = parent::performAction($post);
		
		if(!($response instanceof MM_Response))
		{
			switch($post[self::$MM_JSACTION]) 
			{
				case self::$MM_JSACTION_SAVE:
					return $this->saveCoupon($post);
					
				case self::$MM_JSACTION_REMOVE:
					return $this->removeCoupon($post);
					
				default:
					return new MM_Response($response);
			}
		}
		else 
		{
			return $response;
		}
	}

 	
 	public function getViewData($dg)
 	{
		global $wpdb;
		
		$sqlResultCount = "select 
					count(distinct id) as total 
					from 
					`".MM_TABLE_COUPONS."` `c`";
		
		if(!empty($where)){
			if(preg_match("/^(where)/", strtolower(trim($where)))){
				$sqlResultCount.= " {$where} ";
			}	
			else{
				$sqlResultCount.= " where {$where} ";
			}
		}
		
		$countRow = $wpdb->get_row($sqlResultCount);
		
		$sql = "select 
					'{$countRow->total}' as total, 
					`c`.`id` AS `id`,
					`c`.`coupon_name` AS `coupon_name`,
					`c`.`coupon_code` AS `coupon_code`,
					`c`.`coupon_type` AS `coupon_type`,
					`c`.`coupon_value` AS `coupon_value`,
					`c`.`description` AS `description`,
					`c`.`quantity` AS `quantity`,
					`c`.`start_date` AS `start_date`,
					`c`.`end_date` AS `end_date`,
					`c`.`date_modified` AS `date_modified`,
					`c`.`date_added` AS `date_added`,
					(select count(0) AS `total` from `mm_coupon_usage` where (`mm_coupon_usage`.`coupon_id` = `c`.`id`)) AS `quantity_used`,
					(select group_concat(`p`.`name` separator ', ') AS `restrictions` from (`mm_coupon_restrictions` `r` left join `mm_products` `p` on((`r`.`product_id` = `p`.`id`))) where (`c`.`id` = `r`.`coupon_id`) group by `c`.`id`) AS `product_restrictions` 
					from 
					`".MM_TABLE_COUPONS."` `c` ";
	
		if(!empty($where)){
			if(preg_match("/^(where)/", strtolower(trim($where)))){
				$sql.= " {$where} ";
			}	
			else{
				$sql.= " where {$where} ";
			}
		}
		
		if(!is_null($dg) && !is_null($dg->sortBy) && !empty($dg->sortBy)) {
			$sql.= "ORDER BY {$dg->sortBy} {$dg->sortDir}";
		}
		
		
		if(!is_null($dg)) {
			$sql .= $dg->getLimitSql();
		}
		
		$result = $wpdb->get_results($sql);
		
		if(!$result || is_null($result)) {
			return array();
		}
		
		return $result;
 	}
	
	private function removeCoupon($post)
	{
		if(isset($post["id"]))
		{
			$id = (isset($post["id"]))?$post["id"]:"0";
			$coupon = new MM_Coupon($id);
			$mediator = new MM_PaymentServiceMediator();
			$response = $mediator->notifyCouponRemoved($coupon);
			if ($response->type == MM_Response::$ERROR)
			{
				return $response;
			}
			$coupon->remove();
		}
		return new MM_Response();
	}
	
	private function saveCoupon($post){
		
		$blankFields = array("mm_coupon_name","mm_coupon_code");
		foreach($blankFields as $field)
		{
			if($post[$field] == "")
			{
				return new MM_Response("{$field} must be completed", MM_Response::$ERROR);
			}	
		}
		
		$id = (isset($post["id"]))?$post["id"]:"0";
		$coupon = new MM_Coupon($id);
		$info = $coupon->getFormFields();
		
		if($post["mm_quantity"] == "" || strtolower($post["mm_quantity"])=="unlimited"){
			$post["mm_quantity"] = "-1";
		}
		else{
			$post["mm_quantity"] = intval($post["mm_quantity"]);
		}
		
		foreach($info as $k=>$v){
			$key = "mm_".$k;
			if(isset($post[$key])){
				$info->$k = $post[$key];
			}
		}
		$coupon->setQuantity($post["mm_quantity"]);
		
		$info->start_date = Date("Y-m-d", strtotime($post["mm_start_date"]));
		if(!empty($post["mm_end_date"])){
			$info->end_date = Date("Y-m-d", strtotime($post["mm_end_date"]));
		}
		
		if(!preg_match("/^[a-zA-Z0-9_]+$/", $post["mm_coupon_code"])){
			return new MM_Response("Coupon code can contain letters, numbers, or an '_'.  No spaces allowed.", MM_Response::$ERROR);
		}
		$info->recurring_billing_setting = $post["mm_recurring_setting"];
		
		$saveProds = array();
		if(isset($post["mm_products"])){
			$products = $post["mm_products"];
			if(is_array($products)){
				foreach($products as $id){
					$saveProds[$id] = $id;
				}
				$info->products = $saveProds;
			}
		}
		
		$info->coupon_value_currency = MM_CurrencyUtil::getActiveCurrency();
		
		$coupon->setData($info);
		$ret = $coupon->commitData();
		if($ret!==false)
		{
			$mediator = new MM_PaymentServiceMediator();
			$response = $mediator->notifyCouponAdded($coupon);
			if ($response->type == MM_Response::$ERROR)
			{
				$coupon->remove();
				return $response;
			}	
			return $response;
		}
		return new MM_Response("Unable to save coupon as it may already be in use", MM_Response::$ERROR);
	}
}
