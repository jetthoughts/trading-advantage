/**
 *
 * MemberMouse(TM) (http://www.membermouse.com)
 * (c) MemberMouse, LLC. All rights reserved.
 * 
 * MM_OrderItem represents the line items attached to an order. These can either be products or coupons
 * As far as the attributes of this class, the item type is either ORDER_ITEM_PRODUCT or ORDER_ITEM_DISCOUNT. The description is a simple description of the line item
 * The amount is the per_unit amount, the quantity is the number of units, and the total is (amount * quantity), which in the future may be modified by 
 * taxes and/or shipping
 * Although the total column could be calculated dynamically (and thus not stored), storing it allows future reporting to be done by summing the total column of the
 * database table for each order, which will simplify report implementation and offer speed advantages while simultaneous reducing server/database load
 *
 */

class MM_OrderItem extends MM_Entity
{
	private $orderId = "";
	private $itemType;
	private $itemId;
	private $description;
	private $amount;
	private $quantity;
	private $total;
	private $status = "";
	private $isRecurring = false;
	private $recurringAmount = "";
	private $trialAmount = "";
	private $trialFrequency = "";
	private $trialDuration = "";
	private $rebillPeriod = "";
	private $rebillFrequency = "";
	private $maxRebills = 0;
	private $currency = "";
	
	public static $ORDER_ITEM_TYPE_PRODUCT = 1;
	public static $ORDER_ITEM_TYPE_DISCOUNT = 2;
	
	public static $STATUS_RECURRING = 1;
	public static $STATUS_RECURRING_COMPLETE = 2;
	public static $STATUS_RECURRING_CANCELLED = 3;
	public static $STATUS_RECURRING_REBILL_FAILED = 4;
	
	private $orderReference;
	
	public function __construct($id="",$getData=true,MM_Order $orderReference=null)
	{
		$this->currency = MM_CurrencyUtil::getActiveCurrency();
		parent::__construct($id,$getData);
		if (!is_null($orderReference))
		{
			$this->orderReference = $orderReference;
		}
	}
	
	
	/**
	 * Destroy removes the reference to the parent order, thus breaking the circular reference that could keep both from being collected. 
	 * In PHP <= 5.2, and 5.3+ when using the old garbage collector, destroy() must be called manually to free the used memory.
	 * In THEORY PHP 5.4+ can do this automatically
	 */
	public function destroy()
	{
		unset($this->orderReference);
	}
	
	/**
	 * Retrieve the db record for this entity from the database
	 * 
	 * @see MM_Entity::getData()
	 */
	public function getData()
	{
		global $wpdb;
		if (intval($this->id) > 0)
		{
			$sql = "SELECT * from ".MM_TABLE_ORDER_ITEMS." where id={$this->id}";
			$result = $wpdb->get_row($sql);
			if($result) 
			{
				$this->setData($result);
			}
			else 
			{
				parent::invalidate();
			}
		}
		else
		{
			parent::invalidate();
		}
	}
	
	
	/**
	 * Populate this entity based on the contents of the object $data, which is generally returned from a wpdb database query
	 * 
	 * @param array $data An object whose attributes represent the row in the underlying database table
	 * @see MM_Entity::setData()
	 */
	public function setData($data)
	{
		try
		{
			$this->id = $data->id;
			$this->orderId = $data->order_id;
			$this->itemType = $data->item_type;
			$this->itemId = $data->item_id;
			$this->description = $data->description;
			$this->amount = $data->amount;
			$this->quantity = $data->quantity;
			$this->total = $data->total;
			$this->status = $data->status;
			$this->recurringAmount = $data->recurring_amount;
			$this->isRecurring = ($data->is_recurring == 1)?true:false;
			$this->trialAmount = $data->trial_amount;
			$this->trialDuration = $data->trial_duration;
			$this->trialFrequency = $data->trial_frequency;
			$this->rebillPeriod = $data->rebill_period;
			$this->rebillFrequency = $data->rebill_frequency;
			$this->maxRebills = !is_null($data->max_rebills)?$data->max_rebills:0;
			$this->currency = !empty($data->currency)?$data->currency:$this->currency;
			
			parent::validate();
		}
		catch (Exception $ex) 
		{
			parent::invalidate();
		}
	}
	
	
	/**
	 * Commit the contents of this entity to the database
	 * 
	 * @return MM_Response object representing success or failure
	 * @see MM_Entity::commitData()
	 */
	public function commitData()
	{
		global $wpdb;
		
		$this->calculateTotal(); //make sure the total is accurate 
		$isUpdate = (intval($this->id) >0)?true:false;
		
		$itemData = array(  "order_id"  		=> $this->orderId,
						    "item_type"  		=> $this->itemType,
							"item_id"    		=> $this->itemId,
							"description"		=> $this->description,
							"amount"	 		=> $this->amount,
							"quantity"	 		=> $this->quantity,
							"total"				=> $this->total,
							"status"      		=> $this->status,
							"recurring_amount"  => $this->recurringAmount,
							"is_recurring"		=> ($this->isRecurring)?1:0
		);
		
		
		if (!empty($this->trialDuration) && !empty($this->trialFrequency))
		{
			$itemData['trial_amount']    = $this->trialAmount;
			$itemData['trial_duration']  = $this->trialDuration;
			$itemData['trial_frequency'] = $this->trialFrequency;
		}
		
		if (!empty($this->rebillPeriod) && !empty($this->rebillFrequency))
		{
			$itemData['rebill_period'] = $this->rebillPeriod;
			$itemData['rebill_frequency'] = $this->rebillFrequency;
		}
		
		if ($this->isRecurring() && ($this->maxRebills>0))
		{
			$itemData['max_rebills'] = $this->maxRebills;
		}
		
		if (!$isUpdate)
		{
			//this is a new record
			$result = $wpdb->insert(MM_TABLE_ORDER_ITEMS,$itemData);
		}
		else 
		{
			$updateWhere = array("id"=>$this->id);
			$result = $wpdb->update(MM_TABLE_ORDER_ITEMS,$itemData,$updateWhere);
		}
		
		if($result === false)
		{
			return new MM_Response("ERROR: unable to create order item: error = ".$wpdb->last_error, MM_Response::$ERROR);
		}
		
		
		if (!$isUpdate)
		{
			//retrieve/set the newly assigned id when creating
			$this->id = $wpdb->insert_id;
			
			if ($this->itemType == MM_OrderItem::$ORDER_ITEM_TYPE_DISCOUNT)
			{
				$coupon = new MM_Coupon($this->itemId);
				if ($coupon->isValid())
				{
					//update the coupon statistics
					$orderNeedsDestroying = false;
					if (!empty($this->orderReference) && ($this->orderReference instanceof MM_Order))
					{
						$order = $this->orderReference;
					}
					else
					{
						$order = new MM_Order($this->orderId);
						$orderNeedsDestroying = true; //this is a new object, so it must be destroyed in scope to prevent memory leaks
					}
					
					if ($order->isValid()) //assumes the order committed successfully prior to cascading down to the item commits
					{
						$couponUser = $order->getCustomer();
						if ($couponUser->isValid())
						{
							$productItems = $order->getProducts();
							if (count($productItems) == 1)
							{
								//only one product, assume it was validated that the coupon could be applied to this product prior to this point
								$productItem = reset($productItems);
								MM_Coupon::addUsed($coupon->getCouponCode(),$couponUser->getId(),$productItem->getItemId());
							}
							else if ($count($productItem) > 1)
							{
								//the order has more than one product, find the products that the coupon applies to
								$validProducts = $coupon->getProducts();
								foreach ($productItems as $aProductItem)
								{
									$aProductItem = new MM_OrderItem();
									if (in_array($aProductItem->getItemId(),$validProducts))
									{
										MM_Coupon::addUsed($coupon->getCouponCode(),$couponUser->getId(),$aProductItem->getItemId());
									}
								}
							}
						}
						
						if ($orderNeedsDestroying)
						{
							$order->destroy();
						}
					}
				}
			} //end coupon handling
		} //end entity creation handling
		
			
		parent::validate();
		return new MM_Response();
	}
	
	/**
	 * calculateTotal uses the per-item amount and quantity, and whether this is a discount or product item, 
	 * to calculate the total
	 * 
	 * @return float The total for this line item, positive for purchase, negative for discount
	 */
	public function calculateTotal()
	{
		$this->total = 0;
		if (($this->itemType == MM_OrderItem::$ORDER_ITEM_TYPE_DISCOUNT))
		{
			$multiplier = -1;
			if (is_null($this->orderReference))
			{
				return 0; //TODO: REFACTOR: how to catch that the calling code didnt establish an order reference on item creation?
			}
			
			$coupon = new MM_Coupon($this->itemId);
			if ($coupon->isValid())
			{
				//check for eligible products
				$orderProductItems = $this->orderReference->getProducts(); //returns array of order items of type product, keyed by the product id
				$coupon->getAssocProducts();
				$orderProductIds = array_keys($orderProductItems);
				$couponProductIds = $coupon->getProducts(); //returns array of product ids
				$intersection = array_intersect($orderProductIds, $couponProductIds);
				$productRestrictions = (count($couponProductIds) > 0);
				$orderHasQualifyingProducts = ((count($intersection) > 0) || (count($couponProductIds) == 0));
				
				
				if ($coupon->getCouponType() == MM_Coupon::$TYPE_DOLLAR)
				{
					$this->amount = $coupon->getCouponValue();
					if ((!$productRestrictions) || (($productRestrictions) && ($orderHasQualifyingProducts)))
					{
						$this->total = abs(floatval($this->amount) * floatval($this->quantity)) * $multiplier;
						
						if ($coupon->getRecurringBillingSetting() == "all")
						{
							//this could be interpreted in 2 ways: a fixed $ amount off per order rebill, or a fixed $amount off per item rebill
							//this implementation assumes the $ amount is discounted from the order. So for instance, if in the future multiple products are
							//allowed, and a $10 coupon is applied to all rebills of an order consisting of 2 recurring products, $5 will be discounted from each,
							//making the total discount $10, instead of discounting $10 from each product (which would make the total discount $20)
							//This will not be active initially, but writing this code now means less will have to be retrofitted.
							//Important limitation: This code assumes that coupons are not stackable
							$applyToIds = (!$productRestrictions)?$orderProductIds:$intersection;
							$numberOfQualifyingProducts = count($applyToIds);
							$discountSplit = round(($coupon->getCouponValue(false)/$numberOfQualifyingProducts),2);
							$remainder = $coupon->getCouponValue(false) - ($discountSplit * $numberOfQualifyingProducts);
							$i = 0;
							foreach ($applyToIds as $eligibleId)
							{
								$eligibleProductItem = $orderProductItems[$eligibleId];
								$orderProduct = new MM_Product($eligibleProductItem->getItemId());
								if ($orderProduct->isValid())
								{
									$newRecurringPrice = $eligibleProductItem->getQuantity() * $orderProduct->getPrice(false);
									$newRecurringPrice -= $discountSplit;
									if ((++$i) == $numberOfQualifyingProducts)
									{
										$newRecurringPrice-= $remainder;
									}
									$newRecurringPrice = ($newRecurringPrice>=0)?$newRecurringPrice:0.00;
									$eligibleProductItem->setRecurringAmount($newRecurringPrice);
								}
							}
						}
					}
				}
				else if ($coupon->getCouponType() == MM_Coupon::$TYPE_PERCENTAGE)
				{
					$totalToApplyCouponAgainst = 0;
					$applyToIds = array();
					if (!$productRestrictions)
					{
						//with no restrictions, that means it applied to the entire order, minus tax and shipping
						$applyToIds = $orderProductIds;
					}
					else if ($productRestrictions && $orderHasQualifyingProducts) //stated this way for readability
					{
						$applyToIds = $intersection;
					}
					
					foreach ($applyToIds as $eligibleId)
					{
						$eligibleProductItem = $orderProductItems[$eligibleId];
						$totalToApplyCouponAgainst += ($eligibleProductItem->getAmount() * $eligibleProductItem->getQuantity());
						if ($coupon->getRecurringBillingSetting() == "all")
						{
							$orderProduct = new MM_Product($eligibleProductItem->getItemId());
							if ($orderProduct->isValid())
							{
								$newRecurringPrice = $orderProduct->getPrice(false);
								$newRecurringPrice -= ($newRecurringPrice * abs(floatval($coupon->getCouponValue(false))/100));
								$newRecurringPrice = round($newRecurringPrice,2);
								//TODO: REFACTOR: Replace with integer math to simulate round, due to imprecision and the fact that it rounds up
								$newRecurringPrice = ($newRecurringPrice>=0)?$newRecurringPrice:0.00;
								$eligibleProductItem->setRecurringAmount($newRecurringPrice);
							}
						}
					}
					//now that we have the eligible amount, apply the discount
					$this->total = abs(floatval($totalToApplyCouponAgainst)) * abs(floatval($coupon->getCouponValue(false))/100) * $multiplier;
				}
				else if($coupon->getCouponType() == MM_Coupon::$TYPE_FREE)
				{
					$totalToApplyCouponAgainst = 0;
					$applyToIds = array();
					if (!$productRestrictions)
					{
						//with no restrictions, that means it applied to the entire order, minus tax and shipping
						$applyToIds = $orderProductIds;
					}
					else if ($productRestrictions && $orderHasQualifyingProducts) //stated this way for readability
					{
						$applyToIds = $intersection;
					}
					
					foreach ($applyToIds as $eligibleId)
					{
						$eligibleProductItem = $orderProductItems[$eligibleId];
						$totalToApplyCouponAgainst += ($eligibleProductItem->getAmount() * $eligibleProductItem->getQuantity());
						if ($eligibleProductItem->isRecurring())
						{
							$eligibleProductItem->setRecurringAmount(0.00);
						}
					}
					//now that we have the eligible amount, apply the discount
					$this->total = abs(floatval($totalToApplyCouponAgainst)) * $multiplier;
				}
			}
		}
		else if ($this->itemType == MM_OrderItem::$ORDER_ITEM_TYPE_PRODUCT)
		{
			$multiplier = 1;
			$this->total = abs(floatval($this->amount) * floatval($this->quantity)) * $multiplier;
		}
			
		return $this->total;
	}
	
	/**
	 * getOrderId returns the id for the order this item is attached to
	 * 
	 * @return String id for the order this item is attached to
	 */
	public function getOrderId()
	{
		return $this->orderId;
	}
	
	/**
	 * setOrderId Sets the id for the order this item is attached to
	 * 
	 * @param String $orderId The the id for the order this item is attached to
	 */
	public function setOrderId($orderId)
	{
		$this->orderId = $orderId;
	}
	
	
	/**
	 * Returns the type of item represented. If the order item represents a product or a coupon, the item type needs to have been set in order to allow MemberMouse to 
	 * properly access the product or coupon information that the item represents. The possible values for item type are represented as constants in 
	 * MM_OrderItem
	 * 
	 * @return int An integer representing the type of item this is
	 */
	public function getItemType()
	{
		return $this->itemType;
	}
	
	
	/**
	 * Sets the type of item represented. If the order item represents a product or a coupon, the item type must be set in order to allow MemberMouse to 
	 * properly access the product or coupon information that the item represents. The possible values for item type are represented as constants in 
	 * MM_OrderItem
	 * 
	 * @param int $itemType An integer representing the type of item this is
	 */
	public function setItemType($itemType)
	{
		$this->itemType = $itemType;
	}
	
	
	/**
	 * Returns the id for any linked item. If this order item is a product, the item id is set to the product id. If the order item is a coupon, the item id is
	 * the coupon id. If additional order item types are added in the future, the item id allows a link to be made to another object from which more detailed information
	 * can be obtained.
	 * 
	 * @return int The id of any linked item
	 */
	public function getItemId()
	{
		return $this->itemId;
	}
	
	
	/**
	 * Sets the item id for the linked item. If this order item is a product, the item id is set to the product id. If the order item is a coupon, the item id is
	 * the coupon id. If additional order item types are added in the future, the item id allows a link to be made to another object from which more detailed information
	 * can be obtained.
	 * 
	 * @param int $itemId The id of any linked item
	 */
	public function setItemId($itemId)
	{
		$this->itemId = $itemId;
	}
	
	
	/**
	 * Returns the description for this order item
	 * 
	 * @return String description of the item
	 */
	public function getDescription()
	{
		return $this->description;
	}
	
	
	/**
	 * A description of this order item
	 * 
	 * @param String $description The order item description
	 */
	public function setDescription($description)
	{
		$this->description = $description;
	}
	
	
	/**
	 * Returns the unit price of the order item, prior to taxes, shipping, and discounts
	 * 
	 * @return float The unit price of this item
	 */
	public function getAmount()
	{
		return number_format(floatval($this->amount),MM_CurrencyUtil::getPrecisionForCurrency($this->currency));
	}
	
	
	/**
	 * Sets the unit price of the order item, prior to taxes, shipping, and discounts
	 * 
	 * @param float $amount The unit price of this item
	 */
	public function setAmount($amount)
	{
		$this->amount = $amount;
	}
	
	
	/**
	 * Returns the quantity ordered for this order item
	 * 
	 * @return int The quantity ordered
	 */
	public function getQuantity()
	{
		return $this->quantity;
	}
	
	
	/**
	 * Sets the quantity ordered for this order item
	 * 
	 * @param int The quantity ordered
	 */
	public function setQuantity($quantity)
	{
		$this->quantity = $quantity;
	}
	
	
	/**
	 * Returns the total, after taxes, shipping, and discounts
	 * 
	 * @return float The total for the order
	 */
	public function getTotal()
	{
		return number_format(floatval($this->total),MM_CurrencyUtil::getPrecisionForCurrency($this->currency));
	}
	
	
	/**
	 * Sets the total, after taxes, shipping, and discounts
	 * 
	 * @param float $total The total for the order
	 */
	public function setTotal($total)
	{
		$this->total = $total;
	}
	
	
	/**
	 * Set the status of this order item. This is one of the static constants in MM_OrderItem
	 * 
	 * @param int $status The status of this order item
	 */
	public function setStatus($status)
	{
		$this->status = $status;
	}
	
	
	/**
	 * Returns the status of this order item. This is one of the static constants in MM_OrderItem
	 * 
	 * @return int The status of this order item
	 */
	public function getStatus()
	{
		return $this->status;
	}
	
	
	public function setRecurringAmount($recurringAmount)
	{
		$this->recurringAmount = $recurringAmount;
	}
	
	
	public function getRecurringAmount()
	{
		return $this->recurringAmount;
	}
	
	
	public function setIsRecurring($isRecurring)
	{
		$this->isRecurring = (bool)$isRecurring;
	}
	
	
	public function isRecurring()
	{
		return $this->isRecurring;
	}
	
	
	public function setTrialFrequency($trialFrequency)
	{
		$this->trialFrequency = $trialFrequency;
	}
	
	
	public function getTrialFrequency()
	{
		return $this->trialFrequency;
	}
	
	
	public function setTrialDuration($trialDuration)
	{
		$this->trialDuration = $trialDuration;
	}
	
	
	public function getTrialDuration()
	{
		return $this->trialDuration;
	}
	
	
	public function setRebillFrequency($rebillFrequency)
	{
		$this->rebillFrequency = $rebillFrequency;
	}
	
	
	public function getRebillFrequency()
	{
		return $this->rebillFrequency;
	}
	
	
	public function setRebillPeriod($rebillPeriod)
	{
		$this->rebillPeriod = $rebillPeriod;
	}
	
	
	public function getRebillPeriod()
	{
		return $this->rebillPeriod;
	}
	
	
	public function setMaxRebills($maxRebills)
	{
		$this->maxRebills = $maxRebills;
	}
	
	
	public function getMaxRebills()
	{
		return $this->maxRebills;
	}
	
	
	public function setTrialAmount($trialAmount)
	{
		$this->trialAmount = $trialAmount;
	}
	
	
	public function getTrialAmount()
	{
		return number_format(floatval($this->trialAmount),MM_CurrencyUtil::getPrecisionForCurrency($this->currency));
	}
	
	
	public function setCurrency($currency)
	{
		$this->currency = $currency;
	}
	
	
	public function getCurrency()
	{
		return $this->currency;
	}
}
