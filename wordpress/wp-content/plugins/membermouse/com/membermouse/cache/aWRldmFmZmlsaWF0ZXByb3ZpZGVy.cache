class MM_IDevAffiliateProvider extends MM_AbstractAffiliateProvider 
{
	private static $PAYOUT_TYPE_PERCENT = 1;
	private static $PAYOUT_TYPE_FLATRATE = 2;
	
	private $apiUrl;
	private $apiSecretKey;
	
	/**
	 * To make a connection to iDevAffiliate a URL and API secret key are required
	 * @param Object $provider_info Options object
	 */
	public function __construct($provider_info) 
	{
		parent::__construct($provider_info);
		
		$additional_data = (is_object($provider_info) && isset($provider_info->additional_data))?unserialize($provider_info->additional_data):array();
		if (isset($additional_data['apiUrl'])) 
		{
			$this->apiUrl = $additional_data['apiUrl'];
		}
		
		if (isset($additional_data['apiSecretKey']))
		{
			$this->apiSecretKey = $additional_data['apiSecretKey'];
		}
	}
	
	public function getAffiliateTrackingId()
	{
		return "idev_id";
	}
	
	public function trackCommission(MM_CommissionProfile $commissionProfile, $affiliateId, $orderNumber, $orderTotal, $orderData, $isRebill)
	{
		$params = array();
		$params["secret"] = $this->getAPISecretKey();
		$params["affiliate_id"] = $affiliateId;
		$params["idev_ordernum"] = $orderNumber;
		$params["idev_saleamt"] = $orderTotal;
		$params["ip_address"] = $orderData["order_ip_address"];
		
		// check for a coupon code
		if(isset($orderData["order_coupons"]))
		{
			$coupons = json_decode(stripslashes($orderData["order_coupons"]));
		
			foreach($coupons as $coupon)
			{
				$params["coupon_code"] = $coupon->code;
				
				// only supports one coupon right now
				break;
			}
		}
		
		// see if there are custom rebill commissions
		if($isRebill && $commissionProfile->getRebillCommissionType() != MM_CommissionProfile::$COMMISSION_TYPE_DEFAULT)
		{
			switch($commissionProfile->getRebillCommissionType())
			{
				case MM_CommissionProfile::$COMMISSION_TYPE_PERCENT:
					$params["idev_percent"] = intval($commissionProfile->getRebillCommissionValue()) / 100;
					break;
					
				case MM_CommissionProfile::$COMMISSION_TYPE_FLATRATE:
					$params["idev_commission"] = $commissionProfile->getRebillCommissionValue();
					break;
			}
		}
			
		return $this->doHTTPRequest($this->getAPIUrl()."/sale.php", "POST", $params);
	}
	
	public function reverseCommission($affiliateId, $orderNumber) 
	{ 
		$params = array();
		$params["secret"] = $this->getAPISecretKey();
		$params["order_number"] = $orderNumber;
		
		return $this->doHTTPRequest($this->getAPIUrl()."/API/scripts/terminate_commission.php", "POST", $params);
	}
	
	public function createAffiliateAccount($userData) 
	{ 
		$profileResponse = $this->getProfileIdForMembershipLevel($userData["membership_level"]);
		
		if(MM_Response::isSuccess($profileResponse) && !empty($profileResponse->message))
		{
			// profile info is in the format {payoutLevelID}_{typeID}_{levelNumber}
			$profileParams = explode("_", $profileResponse->message);
			
			if(is_array($profileParams) && count($profileParams) == 3)
			{
				$type = $profileParams[1];
				$level = $profileParams[2];
				
				$user = new MM_User($userData["member_id"]);
				
				if($user->isValid())
				{
					$params = array();
					$params["secret"] = $this->getAPISecretKey();
					$params["username"] = $user->getUsername();
					$params["password"] = $user->getPassword();
					$params["email"] = $user->getEmail();
					$params["payout_type"] = $type;
					$params["payout_level"] = $level;
					$params["first_name"] = $user->getFirstName();
					$params["last_name"] = $user->getLastName();
					$params["phone"] = $user->getPhone();
					$params["address_1"] = $user->getBillingAddress();
					$params["city"] = $user->getBillingCity();
					$params["state"] = $user->getBillingState();
					$params["zip"] =  $user->getBillingZipCode();
					$params["country"] = $user->getBillingCountry();
					$response = $this->doHTTPRequest($this->getAPIUrl()."/API/scripts/mm_new_affiliate.php", "POST", $params);
				}
			}
		}
	}
	
	/**
	 * 
	 * Return the payout profiles associated with the affiliate provider, keyed by id with the values being profile names
	 * @return MM_Response containing profiles as the message on success, an MM_Response containing the error state otherwise
	 */
	public function getPayoutProfiles() 
	{
		$profiles = array();
		$params = array();
		$params["secret"] = $this->getAPISecretKey();
		$response = $this->doHTTPRequest($this->getAPIUrl()."/API/scripts/get_payout_levels.php", "POST", $params);
		
		if(MM_Response::isSuccess($response))
		{
			$profileList = json_decode($response->message);
			
			foreach($profileList as $profile)
			{
				$payoutLevelTitle = "";
				$payoutAmount = "";
				
				switch(intval($profile->type))
				{
					case self::$PAYOUT_TYPE_PERCENT:
						$payoutLevelTitle .= "Percentage ";
						$payoutAmount = floatval($profile->amt) * 100;
						$payoutAmount .= "%";
						break;
						
					case self::$PAYOUT_TYPE_FLATRATE:
						$payoutLevelTitle .= "Flat Rate ";
						$payoutAmount = _mmf($profile->amt,$profile->currency);
						break;
				}
				
				$payoutLevelTitle .= "Payout Level {$profile->level} ({$payoutAmount})";
				
				$profiles[$profile->id."_".$profile->type."_".$profile->level] = $payoutLevelTitle;
			}
		}
		
		return new MM_Response($profiles, MM_Response::$SUCCESS);
	}
	
	/**
	 * Report the features that iDevAffiliate supports
	 *
	 * @param integer $featureConst a const as defined in MM_AffiliateProviderFeatures
	 * @return boolean true if supported, false if not supported
	 */
	public function supportsFeature($featureConst)
	{
		$supported[] = MM_AffiliateProviderFeatures::DEFAULT_AFFILIATE_ID;
		$supported[] = MM_AffiliateProviderFeatures::CUSTOM_REBILL_COMMISSIONS;
		$supported[] = MM_AffiliateProviderFeatures::AFFILIATE_ACCOUNT_CREATION;
		$supported[] = MM_AffiliateProviderFeatures::COMMISSION_TRACKING;
		return in_array($featureConst,$supported,true);
	}
	
	/**
	 * Return a DHTML/Javascript dialog capable of collecting the options needed to configure the provider
	 * @return String the markup for the options dialog
	 */
	public function renderOptionsDialog($post) 
	{
		$provider_entity = new MM_AffiliateProvider();
		$provider_entity->setToken($this->getToken());
		$provider_entity->getData();
		$api_url = ($provider_entity->isValid())?$provider_entity->getConfigOption("apiUrl"):"";
		$api_secret_key = ($provider_entity->isValid())?$provider_entity->getConfigOption("apiSecretKey"):"";
		
		$form = new MM_AffiliateProviderDialog();
		$form->dialog = <<<OPTIONS
		<div id="mm-provider-config-options">	
			<table>
			<tr>
				<td style='width:100px;'>iDevAffiliate URL</td>
				<td>
					<span style="font-family:courier; font-size:11px;">
					<input type="text" name="idevaffiliate_url" id="idevaffiliate_url" size="50" value="{$api_url}"/>
					</span>
				</td>
			</tr>
			<tr>	
				<td>API Secret Key</td>
				<td>
					<span style="font-family:courier; font-size:11px;">
					<input type="text" name="idevaffiliate_secret_key" id="idevaffiliate_secret_key" size="25" value="{$api_secret_key}"/>
					</span>
				</td>
			</tr>
			</table>		
		</div>
OPTIONS;
		return $form;
	}
	
	/**
	 * Responds to data collected from the form rendered by renderOptionsDialog
	 * @see MM_AbstractAffiliateProvider::handleOptionsDialog()
	 * @param $optionData Array containing the posted values
	 * @return MM_Response object indicating success or failure
	 */
	public function handleOptionsDialog($optionData) 
	{
		if (is_array($optionData) && ((isset($optionData['idevaffiliate_url'])) && !empty($optionData['idevaffiliate_url'])) 
			&& ((isset($optionData['idevaffiliate_secret_key'])) && !empty($optionData['idevaffiliate_secret_key']))) 
		{
			$provider_token = $optionData['provider_token'];
			$api_url = $optionData['idevaffiliate_url'];
			$api_secret_key = $optionData['idevaffiliate_secret_key'];
			
			$this->setAPIUrl($api_url);
			$this->setAPISecretKey($api_secret_key);
			
			$provider_entity = new MM_AffiliateProvider();
			$provider_entity->setToken($provider_token);
			$provider_entity->getData();
			if ($provider_entity->isValid()) 
			{
				//first write the provider's configuration options
				$provider_entity->setConfigOption("apiUrl", $this->getAPIUrl());
				$provider_entity->setConfigOption("apiSecretKey", $this->getAPISecretKey());
				$provider_entity->setActive(true);
				$commit_response = $provider_entity->commitData();
				
				if ($commit_response->type == MM_Response::$ERROR) 
				{
					//pass through errors committing to the database
					return $commit_response;
				}
				//now write the profile mappings
				if (isset($optionData['membership_level_mappings']) && is_array($optionData['membership_level_mappings'])) 
				{
					$provider_id = $provider_entity->getId(); 
					return $this->persistProfileMappings($provider_id, $optionData['membership_level_mappings']);
				}
			}
			else 
			{
				//failed to load entity from table
				return new MM_Response("Failed to save settings",MM_Response::$ERROR);
			}
		}
		else 
		{
			//optionData is not an array, or the api URL was not sent
			return new MM_Response("Failed to save settings: API URL and secret key are required",MM_Response::$ERROR);
		}
		
		return new MM_Response();
	}
	
	/**
	 * Configures the iDevAffiliate provider in order to do the initial connect
	 * @see MM_AbstractEmailServiceProvider::configureFromOptions()
	 * @param $optionData Array The values posted from the form rendered by renderOptionsDialog
	 */
	public function configureFromOptions($optionData) 
	{
		if (isset($optionData['idevaffiliate_url'])) 
		{
			$this->setAPIUrl($optionData['idevaffiliate_url']);
		}
		if (isset($optionData['idevaffiliate_secret_key']))
		{
			$this->setAPISecretKey($optionData['idevaffiliate_secret_key']);
		}
		return new MM_Response();
	}
	
	public function renderAdditionalOptions()
	{
		$output = "<p class=\"mm-section-header\">Enable Passing Affiliate ID to Your Landing Page</p>";
		$output .= "<p><a href=\"{$this->getAPIUrl()}/admin/setup.php?action=46&function=1\" target=\"_blank\" class=\"mm-button small green\">Configure in iDevAffiliate</a></p>";
		return $output;
	}
	
	/**
	 * 
	 * Returns the API URL
	 * @return String the API URL
	 */
	protected function getAPIUrl() 
	{
		if(substr($this->apiUrl, -1) == "/")
		{
			return substr($this->apiUrl, 0, strlen($apiUrl)-1);
		}
		else
		{
			return $this->apiUrl;
		}
	}
	
	/**
	 * 
	 * Sets the API URL
	 * @param String $apiUrl The new API URL
	 */
	protected function setAPIUrl($apiUrl) 
	{
		if(substr($apiUrl, -1) == "/")
		{
			$this->apiUrl = substr($apiUrl, 0, strlen($apiUrl)-1);
		}
		else
		{
			$this->apiUrl = $apiUrl;
		}
	}
	
	/**
	 * 
	 * Returns the API secret key
	 * @return String the API secret key
	 */
	protected function getAPISecretKey() 
	{
		return $this->apiSecretKey;
	}
	
	/**
	 * 
	 * Sets the API secret key
	 * @param String $apiSecretKey The new API secret key
	 */
	protected function setAPISecretKey($apiSecretKey) 
	{
		$this->apiSecretKey = $apiSecretKey;
	}
	
}
