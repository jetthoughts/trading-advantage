abstract class MM_AbstractEmailServiceProvider {
	
	private $name;
	private $token;
	
	public function handleOptionsDialog($optionData) {}
	public function configureFromOptions($optionData) { return new MM_Response(); }
	public function getLists() {}
	public function addMemberToList($email,$listId) { return new MM_Response();}
	public function removeMemberFromList($email,$listId) { return new MM_Response();}
	public function changeMembershipLevel($email, $newMemberType) { return new MM_Response();}
	public function updateMember($email,$listId,$newEmail="") { return new MM_Response();}
	
	/**
	 * 
	 * Default constructor for all providers. 
	 * @param String $provider_info An associative array of provider information from the data store
	 */
	public function __construct($provider_info) 
	{
		$this->name = $provider_info->provider_name;
		$this->token = $provider_info->provider_token;
	}
	
	/**
	 * Returns an object capable of rendering the default options dialog
	 * @param Array $post Any data posted necessary to draw the options dialog
	 * @return Object of type MM_EmailServiceProviderDialog representing the dialog to draw
	 */
	public function renderOptionsDialog($post) {
		$form = new MM_EmailServiceProviderDialog();
		return $form;
	}
	
	/**
	 * The default send action is to route the message to wp_mail. wp_mail supports one message type, with the
	 * content-type set using the wp_mail_content_type filter, so html will be favored but text will be used in
	 * its absense. Note that bodyHTML and bodyText are both optional, but one of them is expected to contain a (non-null) value
	 * 
	 * @param String $toAddress - Message Recipient
	 * @param String $subject - Message Subject
	 * @param String $bodyHTML - The html content of the message
	 * @param String $bodyText - The text content of the message
	 * @param String $headers - Additional headers to send with the message
	 * @param array $attachments - An array of files to attach
	 */
	public function send($toAddress, $subject, $bodyHTML="", $bodyText="", $headers="", $attachments="") 
	{
		//if attachments was not set, initialize it to an empty array
		if (empty($attachments)) 
		{
			$attachments = array();
		}
		else if (!is_array($attachments)) 
		{
			//if a single attachment was sent as a string, convert it into an array
			$attachments = array($attachments);
		}
		if (!empty($bodyHTML)) 
		{
			@wp_mail($toAddress, $subject, $bodyHTML, $headers, $attachments);
		}
		else if (!empty($bodyText)) 
		{
			@wp_mail($toAddress, $subject, $bodyText, $headers, $attachments);
		}
	}
	
	/**
	 * Returns the displayable name of the provider
	 */
	public function getName() 
	{
		return $this->name;
	}
	
	/**
	 * Sets the displayable name of the provider
	 * @param String $newName
	 */
	public function setName($newName) 
	{
		$this->name = $newName;
	}
	
	/**
	 * Returns the provider token
	 */
	public function getToken() 
	{
		return $this->token;
	}
	
	/**
	 * Sets the provider toekn
	 * @param String $newToken
	 */
	public function setToken($newToken) 
	{
		$this->token = $newToken;
	}
	
	public function persistListMappings($provider_id, $map) 
	{
		global $wpdb;
		
		MM_Transaction::begin();
		try 
		{
			$result = $wpdb->query( $wpdb->prepare("DELETE FROM ".MM_TABLE_EMAIL_PROVIDER_MAPPINGS." WHERE email_service_provider_id = %d", $provider_id));
			if($result === false)
		 	{
		 		MM_Transaction::rollback();
		 		return new MM_Response("ERROR: unable to remove the existing member type to list mappings", MM_Response::$ERROR);
		 	}
			foreach($map as $member_type_id=>$list_id) 
			{
				$list_id = html_entity_decode($list_id);
				$sql = "INSERT INTO ".MM_TABLE_EMAIL_PROVIDER_MAPPINGS." SET ".
					   "member_type_id = %d,".
					   "list_id = %s,".
					   "email_service_provider_id = %d";
				$result = $wpdb->query( $wpdb->prepare($sql, $member_type_id,html_entity_decode($list_id), $provider_id));
				if($result === false)
			 	{
			 		MM_Transaction::rollback();
			 		return new MM_Response("ERROR: unable to add new member type to list mapping (".$sql.")", MM_Response::$ERROR);
			 	}
				
			}
		}
		catch (Exception $ex) 
		{
			MM_Transaction::rollback();
	 		return new MM_Response("ERROR: unable to map member types to email service provider lists", MM_Response::$ERROR);
		}
		MM_Transaction::commit();
		return new MM_Response();
	}
	
	public function getListIdForMembershipLevel($membershipId) 
	{
		global $wpdb;
		
		$provider_entity = new MM_EmailServiceProvider();
		$provider_entity->setToken($this->getToken());
		$provider_entity->getData();
		if ($provider_entity->isValid())
		{
			$result = $wpdb->get_var($wpdb->prepare("SELECT list_id FROM ".MM_TABLE_EMAIL_PROVIDER_MAPPINGS." WHERE member_type_id = %d and email_service_provider_id = %d", $membershipId, $provider_entity->getId()));
			$listId = ($result != null)?$result:"";
			return new MM_Response($listId,MM_Response::$SUCCESS);
		}
		else 
		{
			//should never happen
			return new MM_Response("ERROR: unable to retrieve information for the email service provider", MM_Response::$ERROR);
		}
	}
	
	public function getListIdForMember($email)
	{
		$member = MM_User::findByEmail($email);
		
		if (!$member->isValid())
		{
			return new MM_Response("Could not locate member with email address {$email}",MM_Response::$ERROR);
		}
		$membershipId = $member->getMembershipId();
		return $this->getListIdForMembershipLevel($membershipId);
	}
}
