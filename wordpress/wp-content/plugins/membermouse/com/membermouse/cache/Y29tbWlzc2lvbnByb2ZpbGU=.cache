/**
 * 
 * MemberMouse(TM) (http://www.membermouse.com)
 * (c) MemberMouse, LLC. All rights reserved.
 */
class MM_CommissionProfile extends MM_Entity
{	
	public static $DFLT_COMMISSION_PROFILE_ID = "-1";
	
	public static $COMMISSION_TYPE_DEFAULT = "default";
	public static $COMMISSION_TYPE_PERCENT = "percent";
	public static $COMMISSION_TYPE_FLATRATE = "flatrate";
	
	private $name = "";
	private $isDefaultFlag = "0";
	private $description = "";
	private $initialCommissionFlag = "1";
	private $rebillCommissionsFlag = "0";
	private $rebillCommissionType = "default";
	private $rebillCommissionValue = "0";
	private $doLimitRebillsFlag = "0";
	private $rebillCommissionLimit = "0";
	private $doReverseCommissionsFlag = "1";
	
	public function getData() 
	{
		global $wpdb;
		
		$sql = "SELECT * FROM ".MM_TABLE_COMMISSION_PROFILES." WHERE id='".$this->id."';";
		$result = $wpdb->get_row($sql);
		
		if($result) {
			$this->setData($result);
		}
		else {
			parent::invalidate();
		}
	}
	
	public function setData($data)
	{
		try 
		{
			$this->id = $data->id;
			$this->name = $data->name;
			$this->isDefaultFlag = $data->is_default;
			$this->description = $data->description;
			$this->initialCommissionFlag = $data->initial_commission_enabled;
			$this->rebillCommissionsFlag = $data->rebill_commissions_enabled;
			$this->rebillCommissionType = $data->rebill_commission_type;
			$this->rebillCommissionValue = $data->rebill_commission_value;
			$this->doLimitRebillsFlag = $data->do_limit_rebill_commissions;
			$this->rebillCommissionLimit = $data->rebill_commission_limit;
			$this->doReverseCommissionsFlag = $data->do_reverse_commissions;
 			
			parent::validate();
		}
		catch (Exception $ex) 
		{
			parent::invalidate();
		}
	}
	
	public function commitData()
	{
		global $wpdb;
		
		$doUpdate = isset($this->id) && $this->id != "" && intval($this->id) > 0;
		
		MM_Transaction::begin();
		try
		{	
			if(!$doUpdate) 
			{
				$sql = "insert into ".MM_TABLE_COMMISSION_PROFILES." set " .
			 			"	name = '%s'," .
			 			"	is_default='%d'," .
			 			"	description='%s'," .
			 			"	initial_commission_enabled='%d'," .
			 			"	rebill_commissions_enabled='%d'," .
			 			"	rebill_commission_type='%s'," .
			 			"	rebill_commission_value='%f'," .
			 			"	do_limit_rebill_commissions='%d'," .
			 			"	rebill_commission_limit='%d', " .
			 			"	do_reverse_commissions='%d'" .
			 			"";
			}
		 	else 
		 	{
				$sql = "update ".MM_TABLE_COMMISSION_PROFILES." set " .
						"	name = '%s'," .
			 			"	is_default='%d'," .
			 			"	description='%s'," .
			 			"	initial_commission_enabled='%d'," .
			 			"	rebill_commissions_enabled='%d'," .
			 			"	rebill_commission_type='%s'," .
			 			"	rebill_commission_value='%f'," .
			 			"	do_limit_rebill_commissions='%d'," .
			 			"	rebill_commission_limit='%d'," .
			 			"	do_reverse_commissions='%d' where id='{$this->id}'" .
			 			"";
		 	}
			
		 	$preparedSql = $wpdb->prepare($sql, $this->name, $this->isDefaultFlag, $this->description, $this->initialCommissionFlag, 
		 										$this->rebillCommissionsFlag, $this->rebillCommissionType, $this->rebillCommissionValue, 
		 										$this->doLimitRebillsFlag, $this->rebillCommissionLimit, $this->doReverseCommissionsFlag);
		 											
		 	$result = $wpdb->query($preparedSql);
		 	
		 	if($result === false)
		 	{
		 		MM_Transaction::rollback();
		 		return new MM_Response("Unable to create commission profile ({$wpdb->last_error})", MM_Response::$ERROR);
		 	}
		 	
		 	if(!$doUpdate) 
		 	{
		 		$this->id = $wpdb->insert_id;
		 	}
		}
		catch(Exception $ex)
		{	
		 	MM_Transaction::rollback();
	 		return new MM_Response("ERROR: unable to create commission profile", MM_Response::$ERROR);
		}
		
		MM_Transaction::commit();
	
		return new MM_Response();
	}
	
	public function delete()
	{	
		global $wpdb;
		
		if(!$this->hasAssociations())
		{
			$sql = "DELETE FROM ".MM_TABLE_COMMISSION_PROFILES." WHERE id='%d' LIMIT 1";
			$results = $wpdb->query($wpdb->prepare($sql, $this->id));
			
			if($results) 
			{
				return true;
			}
		}
		
		return false;
	}
	
	public function hasAssociations()
	{
		global $wpdb;
		
		// check if commission profile is the default
		$sql = "select * from ".MM_TABLE_COMMISSION_PROFILES." where id='{$this->id}'";
		$row = $wpdb->get_row($sql);
		
		if($row->is_default == "1") 
		{
			return true;
		}
		
		// check if commission profile is associated with one or more products
		$sql = "SELECT count(*) as total FROM ".MM_TABLE_PRODUCTS." WHERE commission_profile_id='{$this->id}'";
		$row = $wpdb->get_row($sql);
		
		if($row->total > 0) 
		{
			return true;	
		}
		
		// check if commission profile is associated with one or more partner payouts
		$sql = "SELECT count(*) as total FROM ".MM_TABLE_AFFILIATE_PARTNER_PAYOUTS." WHERE commission_profile_id='{$this->id}'";
		$row = $wpdb->get_row($sql);
		
		if($row->total > 0)
		{
			return true;
		}
		
		return false;
	}
	
	
	/** GETTERS/SETTERS **/
	
	public function setName($str) 
	{
		$this->name = $str;
	}
	
	public function getName()
	{
		return $this->name;
	}
 	
	public function setIsDefault($flag) 
	{
		$this->isDefaultFlag = $flag;
	}
	
	public function isDefault()
	{
		return ($this->isDefaultFlag == "1") ? true : false;
	}
	
	public function setDescription($str) 
	{
		$this->description = $str;
	}
	
	public function getDescription()
	{
		return $this->description;
	}
 	
	public function setInitialCommissionFlag($flag) 
	{
		$this->initialCommissionFlag = $flag;
	}
	
	public function initialCommissionEnabled()
	{
		return ($this->initialCommissionFlag == "1") ? true : false;
	}
 	
	public function setRebillCommissionsFlag($flag) 
	{
		$this->rebillCommissionsFlag = $flag;
	}
	
	public function rebillCommissionsEnabled()
	{
		return ($this->rebillCommissionsFlag == "1") ? true : false;
	}
 	
	public function setRebillCommissionType($type) 
	{
		$validTypes = array();
		$validTypes[] = self::$COMMISSION_TYPE_DEFAULT;
		$validTypes[] = self::$COMMISSION_TYPE_PERCENT;
		$validTypes[] = self::$COMMISSION_TYPE_FLATRATE;
		
		if(in_array($type, $validTypes))
		{
			$this->rebillCommissionType = $type;
		}
		else
		{
			$this->rebillCommissionType = self::$COMMISSION_TYPE_DEFAULT;
		}
	}
	
	public function getRebillCommissionType()
	{
		return $this->rebillCommissionType;
	}
 	
	public function setRebillCommissionValue($value) 
	{
		$this->rebillCommissionValue = $value;
	}
	
	public function getRebillCommissionValue()
	{
		if($this->getRebillCommissionType() == self::$COMMISSION_TYPE_FLATRATE)
		{
			return number_format($this->rebillCommissionValue, 2);
		}
		else if($this->getRebillCommissionType() == self::$COMMISSION_TYPE_PERCENT)
		{
			return number_format($this->rebillCommissionValue, 0);
		}
		else
		{
			return 0;
		}
	}
 	
	public function setDoLimitRebillsFlag($flag) 
	{
		$this->doLimitRebillsFlag = $flag;
	}
	
	public function doLimitRebills()
	{
		return ($this->doLimitRebillsFlag == "1") ? true : false;
	}
 	
	public function setRebillCommissionLimit($value) 
	{
		$this->rebillCommissionLimit = $value;
	}
	
	public function getRebillCommissionLimit()
	{
		return $this->rebillCommissionLimit;
	}
	
	public function getRebillConfigDescription()
	{
		$desc = "";
		
		if($this->getRebillCommissionType() == MM_CommissionProfile::$COMMISSION_TYPE_DEFAULT)
		{
			$desc .= "same commission as initial";
		}
		else if($this->getRebillCommissionType() == MM_CommissionProfile::$COMMISSION_TYPE_PERCENT)
		{
			$desc .= "{$this->getRebillCommissionValue()}% commission";
		}
		else if($this->getRebillCommissionType() == MM_CommissionProfile::$COMMISSION_TYPE_FLATRATE)
		{
			$desc .= "{$this->getRebillCommissionValue()} commission";
		}
		
		if($this->doLimitRebills())
		{
			$desc .= ", limit to {$this->getRebillCommissionLimit()} payments";
		}
		
		return $desc;
	}
 	
	public function setDoReverseCommissionsFlag($flag) 
	{
		$this->doReverseCommissionsFlag = $flag;
	}
	
	public function doReverseCommissions()
	{
		return ($this->doReverseCommissionsFlag == "1") ? true : false;
	}
	
	
	/** UTILITES **/
	
	/**
	 * This method returns the default commission profile
	 *
	 * @return MM_CommissionProfile the default commission profile
	 */
	public static function getDefaultCommissionProfile()
	{
		$dfltCommissionProfile = new MM_CommissionProfile();
	
		global $wpdb;
	
		$sql = "SELECT id FROM ".MM_TABLE_COMMISSION_PROFILES." WHERE is_default='1' LIMIT 1;";
		$result = $wpdb->get_row($sql);
	
		if($result)
		{
			$dfltCommissionProfile = new MM_CommissionProfile($result->id);
		}
	
		return $dfltCommissionProfile;
	}
	
	public static function getCommissionProfilesList()
	{
		global $wpdb;
 		
		$profiles = array();
 		$sql = "SELECT * FROM ".MM_TABLE_COMMISSION_PROFILES." order by name asc;";
 		$rows = $wpdb->get_results($sql);
 		
 		if($rows === false)
 		{
 			return $profiles;
 		}
 		if($rows) 
 		{
	 		foreach($rows as $row)
			{
				$profiles[$row->id] = $row->name;
			}
 		}
 		
 		return $profiles;
	}
}
