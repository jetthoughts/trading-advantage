/**
 *
 * MemberMouse(TM) (http://www.membermouse.com)
 * (c) MemberMouse, LLC. All rights reserved.
 * 
 * The PaymentService Factory retrieves a requested payment service based on a token, or all available payment services
 */
 
class MM_PaymentServiceFactory 
{
	//used to hold instances of payment services that can be reused
	private static $instances = array();
	
	/**
	 * Retrieve all of the active payment services
	 * 
	 * @return an array containing all the active payment service objects, keyed by the token
	 */
	public static function getAvailablePaymentServices()
	{
		global $wpdb;
		
		$paymentServicesArray = array();
		$sql = "select token from ".MM_TABLE_PAYMENT_SERVICES." where active='1'";
		$results = $wpdb->get_results($sql);
		foreach ($results as $row)
		{
			$paymentService = MM_PaymentServiceFactory::getPaymentService($row->token);
			if ($paymentService instanceof MM_PaymentService)
			{
				$paymentServicesArray[$row->token] = $paymentService;
			}
		}
		return $paymentServicesArray;
	}
	
	
	/**
	 * Retrieve the active onsite payment service if there is one.
	 *
	 * @return MM_PaymentService An instance of the active onsite payment service, null if one can't be found
	 */
	public static function getOnsitePaymentService()
	{
		$services = MM_PaymentServiceFactory::getAvailablePaymentServices();
		
		foreach ($services as $service)
		{
			if ($service instanceof MM_PaymentService)
			{
				if($service->supportsFeature(MM_PaymentServiceFeatures::ONSITE_SERVICE))
				{
					return $service;
				}
			}
		}
		
		return null;
	}
	
	/**
	 * Returns a specific payment service. Enforces the singleton nature of payment services and returns an already instantiated instance if the 
	 * requested payment service has already been created
	 * 
	 * @param String $paymentServiceToken
	 * 
	 * @return MM_PaymentService An instance of the payment service matching the supplied token, null if one can't be found
	 */
	public static function getPaymentService($paymentServiceToken)
	{
		if (isset(MM_PaymentServiceFactory::$instances[$paymentServiceToken]) && (MM_PaymentServiceFactory::$instances[$paymentServiceToken] instanceof MM_PaymentService))
		{
			return MM_PaymentServiceFactory::$instances[$paymentServiceToken];
		}
		
		switch ($paymentServiceToken) 
		{
			case MM_PaymentService::$PAYPAL_SERVICE_TOKEN:
				MM_PaymentServiceFactory::$instances[$paymentServiceToken] = new MM_PayPalService();
				break;
			case MM_PaymentService::$CLICKBANK_SERVICE_TOKEN:
				MM_PaymentServiceFactory::$instances[$paymentServiceToken] = new MM_ClickBankService();
				break;
			case MM_PaymentService::$AUTHORIZENET_SERVICE_TOKEN:
				MM_PaymentServiceFactory::$instances[$paymentServiceToken] = new MM_AuthorizeNetService();
				break;
			case MM_PaymentService::$CHARGIFY_SERVICE_TOKEN:
				MM_PaymentServiceFactory::$instances[$paymentServiceToken] = new MM_ChargifyService();
				break;
			case MM_PaymentService::$STRIPE_SERVICE_TOKEN:
				MM_PaymentServiceFactory::$instances[$paymentServiceToken] = new MM_StripeService();
				break;
			case MM_PaymentService::$BRAINTREE_SERVICE_TOKEN:
				MM_PaymentServiceFactory::$instances[$paymentServiceToken] = new MM_BraintreeService();
				break;
			default:
				return null;
				break;
		}
		
		return MM_PaymentServiceFactory::$instances[$paymentServiceToken];
	}
	
	
	/**
	 * Returns a payment service having the request id (pk)
	 * 
	 * @param integer $paymentServiceId The id of the payment service to retrieve
	 * 
	 * @return MM_PaymentService instance on success, null on failure
	 */
	public static function getPaymentServiceById($paymentServiceId)
	{
		global $wpdb;
		
		if (is_null($paymentServiceId))
		{
			return null;
		}
		
		$sql = "select token from ".MM_TABLE_PAYMENT_SERVICES." where id = '{$paymentServiceId}'";
		$tokenObject = $wpdb->get_row($wpdb->prepare($sql,$paymentServiceId));
		if (is_null($tokenObject))
		{
			return null;
		}
		return self::getPaymentService($tokenObject->token);
	}
	
	
	/**
	 * getPaymentServicesArray returns an array of all the potential payment services, keyed by token and filtered by the install type and whether they can be shown on registration
	 *
	 * @return An array containing objects for each payment service, filtered by the product version, active status, and whether they can be shown on registration
	 */
	public static function getPaymentServicesArray()
	{
		global $wpdb;
		$paymentServicesArray = array();
		$valid_tokens = array();
		
		// add valid tokens based on the plugin's permissions
		if(MM_MemberMouseService::hasPermission(MM_MemberMouseService::$PYMT_SERVICE_PAYPAL) == MM_MemberMouseService::$ACTIVE)
		{
			array_push($valid_tokens, MM_PaymentService::$PAYPAL_SERVICE_TOKEN);
		}
		
		if(MM_MemberMouseService::hasPermission(MM_MemberMouseService::$PYMT_SERVICE_CLICKBANK) == MM_MemberMouseService::$ACTIVE)
		{
			array_push($valid_tokens, MM_PaymentService::$CLICKBANK_SERVICE_TOKEN);
		}
		
		if(MM_MemberMouseService::hasPermission(MM_MemberMouseService::$PYMT_SERVICE_AUTHORIZENET) == MM_MemberMouseService::$ACTIVE)
		{
			array_push($valid_tokens, MM_PaymentService::$AUTHORIZENET_SERVICE_TOKEN);
		}
		
		if(MM_MemberMouseService::hasPermission(MM_MemberMouseService::$PYMT_SERVICE_CHARGIFY) == MM_MemberMouseService::$ACTIVE)
		{
			array_push($valid_tokens, MM_PaymentService::$CHARGIFY_SERVICE_TOKEN);
		}
		
		if(MM_MemberMouseService::hasPermission(MM_MemberMouseService::$PYMT_SERVICE_STRIPE) == MM_MemberMouseService::$ACTIVE)
		{
			array_push($valid_tokens, MM_PaymentService::$STRIPE_SERVICE_TOKEN);
		}
		
		if(MM_MemberMouseService::hasPermission(MM_MemberMouseService::$PYMT_SERVICE_BRAINTREE) == MM_MemberMouseService::$ACTIVE)
		{
			array_push($valid_tokens, MM_PaymentService::$BRAINTREE_SERVICE_TOKEN);
		}
	
		$sql = "SELECT token from ".MM_TABLE_PAYMENT_SERVICES;
		$results = $wpdb->get_results($sql);
		
		//add each payment service if the token is in the list of valid tokens, and a valid payment service object can be retrieved from the factory using the token
		foreach ($results as $row)
		{
			$paymentServiceToken = strtoupper($row->token);
			if (in_array($paymentServiceToken,$valid_tokens))
			{
				$paymentService = MM_PaymentServiceFactory::getPaymentService($paymentServiceToken);
				if (($paymentService != null) && ($paymentService instanceOf MM_PaymentService))
				{
					$paymentServicesArray[$paymentServiceToken] = $paymentService;
				}
			}
		}
		return $paymentServicesArray;
	}
	
}
