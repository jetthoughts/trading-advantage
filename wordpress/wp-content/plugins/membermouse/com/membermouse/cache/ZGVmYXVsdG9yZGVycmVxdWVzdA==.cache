/**
 * 
 * MemberMouse(TM) (http://www.membermouse.com)
 * (c) MemberMouse, LLC. All rights reserved.
 *
 * MM_DeafultOrderRequest is responsible for processing order data that comes from a checkout form or from the API.
 * There are three ways a order will be processed through this class. 1) a customer submitting a checkout form
 * 2) an administrator submitting a checkout form to place an order for a customer (i.e. $isCustomerSupportOrder)
 * 3) the API submitting a request (i.e. $isApiRequest). Slightly different behaviors will be performed throughout the 
 * code based on the $isCustomerSupportOrder and $isApiRequest properties.
 */

class MM_DefaultOrderRequest extends MM_OrderRequest
{	
	private $isCustomerSupportOrder = false;
	private $paymentService = null;
	private $order = null;
	private $creditCardInfo = null;
	private $debugMode = false;
	private $checkoutUrl = "";
	private $isFree = false;
	private $doComp = false;
	private $isNewMember = true;
	private $membershipLevelId = 0;
	private $doChangeMembership = false;
	private $customData = array();
	
	/**
	 * This method retrieves an instance of MM_PaymentService and creates an instance of MM_Order and 
	 * populates it with the order data.
	 * 
	 * @see MM_OrderRequest::processRequest()
	 */
	public function processRequest()
	{	
		$this->order = new MM_Order();
		
		// is free?
		if(isset($this->requestData["mm_is_free"]) && intval($this->requestData["mm_is_free"]) == 1)
		{
			$this->isFree = true;
		}
		
		if(!$this->isApiRequest)
		{
			// get checkout URL
			$url = "";
			if(isset($this->requestData["mm_checkout_url"]))
			{
				$url = $this->requestData["mm_checkout_url"];
			}
			$this->checkoutUrl = $url;
			
			// is debug mode?
			if(isset($this->requestData["mm_checkout_debug_mode"]) && $this->requestData["mm_checkout_debug_mode"] == "1")
			{
				$this->debugMode = true;
				
				echo var_dump($this->requestData);
				exit;
			}
			
			// check captcha
			if(isset($this->requestData["recaptcha_response_field"]))
			{
				require_once(MM_PLUGIN_ABSPATH.'/lib/recaptchalib.php');
				$privateKey = MM_OptionUtils::getOption(MM_OptionUtils::$OPTION_KEY_CAPTCHA_PRIVATE_KEY);
				$resp = recaptcha_check_answer ($privateKey,
						$_SERVER["REMOTE_ADDR"],
						$this->requestData["recaptcha_challenge_field"],
						$this->requestData["recaptcha_response_field"]);
				
				if (!$resp->is_valid) 
				{
					$this->state->type = MM_Response::$ERROR;
					$this->state->message = "Invalid captcha entry";
					return $this;
				}
			}
			
			// is customer support order?
			if(isset($this->requestData["mm_is_customer_support_order"]) && $this->requestData["mm_is_customer_support_order"] == "1")
			{
				global $current_user;
				$employee = MM_Employee::findByUserId($current_user->ID);
				if(is_user_logged_in() && $employee->canPlaceSupportOrder())
				{
					$this->isCustomerSupportOrder = true;
				}
				else
				{
					$this->state->type = MM_Response::$ERROR;
					$this->state->message = "You don't have permission to place an order for another user";
					return $this;
				}
			}
		}
		
		if(!$this->isFree)
		{
			// determine payment service
			$serviceToken = "";
			if(isset($this->requestData["mm_field_payment_service"]))
			{
				$serviceToken = $this->requestData["mm_field_payment_service"];
			}
			
			// if the token is not set, attempt to use the onsite payment service
			if($serviceToken == "")
			{
				$this->paymentService = MM_PaymentServiceFactory::getOnsitePaymentService();
			}
			else
			{
				$this->paymentService = MM_PaymentServiceFactory::getPaymentService($serviceToken);
			}
			
			// validate payment service
			if($this->paymentService)
			{
				if(!$this->paymentService->isActive())
				{
					$this->state->type = MM_Response::$ERROR;
					$this->state->message = $this->paymentService->getName()." is not configured for this site";
					return $this;
				}
			}
			else
			{
				$this->state->type = MM_Response::$ERROR;
				$this->state->message = "No ".(($serviceToken == "") ? "onsite" : "offsite")." payment methods are configured for this site";
				return $this;
			}
			
			$this->order->setPaymentMethod($this->paymentService);
		}
		
		// collect form data
		$this->isNewMember = true;
		
		// attempt to find user by ID
		$user = new MM_User($this->requestData["mm_field_user_id"]);
		
		// if use is not logged in and MM is configured to allow logged out members to purchase products on
		// their account, attempt to find the user by email
		$allowLoggedOutPurchases = MM_OptionUtils::getOption(MM_OptionUtils::$OPTION_KEY_ALLOW_LOGGED_OUT_PURCHASES);
		if($allowLoggedOutPurchases == "1" && !$user->isValid())
		{
			$user = MM_User::findByEmail($this->requestData["mm_field_email"]);
		}
		
		if(!$user->isValid())
		{
			$user = new MM_User();
			$user->setEmail($this->requestData["mm_field_email"]);
		}
		else
		{
			// checking if the user is a new member based on their status (accounts with pending/error 
			// status are still considered new because they've never been active)
			if($user->getStatus() != MM_Status::$PENDING && $user->getStatus() != MM_Status::$ERROR)
			{
				$this->isNewMember = false;
				
				// check if handling a request from an existing member to change their membership
				if(isset($this->requestData["mm_membership_level_id"]) && $this->requestData["mm_membership_level_id"] != 0)
				{
					$this->doChangeMembership = false;
				
					if($user->getMembershipId() != $this->requestData["mm_membership_level_id"])
					{
						$this->doChangeMembership = true;
					}
				}
				
				if(!$this->isApiRequest && $this->doChangeMembership == true)
				{
					global $current_user;
					
					// determine if this is an administrator changing a membership for a user
					// or a user changing their own membership
					if($this->isCustomerSupportOrder == true)
					{
						// check to ensure that current user has permission
						// to change memberships for other users
						$employee = MM_Employee::findByUserId($current_user->ID);
						if(!is_user_logged_in() || !$employee->canPlaceSupportOrder())
						{
							$this->state->type = MM_Response::$ERROR;
							$this->state->message = "You don't have sufficient permissions to place an order for another user.";
							return $this;
						}
					}
					else
					{
						if((!isset($current_user->ID)) || (isset($current_user->ID) && intval($current_user->ID) != intval($user->getId())))
						{
							// if MM is not configured to allow logged out users to make purchases against their account, return an error message
							$allowLoggedOutPurchases = MM_OptionUtils::getOption(MM_OptionUtils::$OPTION_KEY_ALLOW_LOGGED_OUT_PURCHASES);
							if($allowLoggedOutPurchases != "1")
							{
								$this->state->type = MM_Response::$ERROR;
								$this->state->message = "An account with email '{$this->requestData["mm_field_email"]}' already exists";
								return $this;
							}
						}
					}
				}
			}
		}
		
		if($this->isNewMember)
		{	
			$user->setPassword($this->getCheckoutFormValue("mm_field_password"));
			$user->setStatus(MM_Status::$PENDING);
		}
		
		if(isset($this->requestData["mm_membership_level_id"]) && $this->requestData["mm_membership_level_id"] != 0)
		{
			$this->membershipLevelId = $this->requestData["mm_membership_level_id"];
			
			// check to make sure membership is valid and active
			$membership = new MM_MembershipLevel($this->membershipLevelId);
			
			if(!$membership->isValid())
			{
				$this->state->type = MM_Response::$ERROR;
				$this->state->message = "Cannot complete order. Membership level ID '".$this->membershipLevelId."' is not valid.";
				return $this;
			}
			
			if(!$membership->isActive())
			{
				$this->state->type = MM_Response::$ERROR;
				$this->state->message = "Cannot complete order. Membership level '{$membership->getName()}' is not active.";
				return $this;
			}
		}
		
		$username = $this->getCheckoutFormValue("mm_field_username");
		if(!empty($username))
		{
			$user->setUsername($username);
		}
		
		$user->setFirstName($this->getCheckoutFormValue("mm_field_first_name"));
		$user->setLastName($this->getCheckoutFormValue("mm_field_last_name"));
		$user->setPhone($this->getCheckoutFormValue("mm_field_phone"));
		
		$billingAddress = new MM_CustomerAddress($user->getFirstName(), $user->getLastName());
		$billingAddress->setPhone($this->getCheckoutFormValue("mm_field_phone"));
		$billingAddress->setAddressLine1($this->getCheckoutFormValue("mm_field_billing_address"));
		$billingAddress->setCity($this->getCheckoutFormValue("mm_field_billing_city"));
		$billingAddress->setState($this->getCheckoutFormValue("mm_field_billing_state"));
		$billingAddress->setPostalCode($this->getCheckoutFormValue("mm_field_billing_zip"));
		$billingAddress->setCountry($this->getCheckoutFormValue("mm_field_billing_country"));
		
		$shippingSameAsBilling = true;
		if(isset($this->requestData["mm_field_billing_equals_shipping"]))
		{
			if($this->requestData["mm_field_billing_equals_shipping"] == "1")
			{
				$shippingSameAsBilling = true;
			}
			else
			{
				$shippingSameAsBilling = false;
			}
		}
		
		if(!$shippingSameAsBilling)
		{
			$shippingAddress = new MM_CustomerAddress($user->getFirstName(), $user->getLastName());
			$shippingAddress->setPhone($this->getCheckoutFormValue("mm_field_phone"));
			$shippingAddress->setAddressLine1($this->getCheckoutFormValue("mm_field_shipping_address"));
			$shippingAddress->setCity($this->getCheckoutFormValue("mm_field_shipping_city"));
			$shippingAddress->setState($this->getCheckoutFormValue("mm_field_shipping_state"));
			$shippingAddress->setPostalCode($this->getCheckoutFormValue("mm_field_shipping_zip"));
			$shippingAddress->setCountry($this->getCheckoutFormValue("mm_field_shipping_country"));
		}
		else
		{
			$shippingAddress = $billingAddress;
		}
		
		$user->setFullBillingAddress($billingAddress);
		$user->setFullShippingAddress($shippingAddress);
		
		if($this->isApiRequest)
		{
			$user->setNotes(MM_Utils::dateToLocal(MM_Utils::getCurrentTime()).": Member created through MM API");
		}
		
		$user->commitData();
		
		$this->order->setCustomer($user);
		$this->order->setBillingAddress($billingAddress);
		$this->order->setShippingAddress($shippingAddress);
		$this->order->setShippingSameAsBilling($shippingSameAsBilling);
		
		$product = new MM_Product($this->requestData["mm_product_id"]);
		
		if(!$product->isActive())
		{
			$this->state->type = MM_Response::$ERROR;
			$this->state->message = "Cannot complete order. Product '{$product->getName()}' is not available.";
			return $this;
		}
		
		$this->order->addProduct($product);
		
		if($product->isShippable())
		{
			$this->order->setShippingMethodFromKey($this->getCheckoutFormValue("mm_field_shipping_method"));
		}
		
		$this->order->setAffiliateId($this->getCheckoutFormValue("mm_field_affiliate_id"));
		$this->order->setSubAffiliateId($this->getCheckoutFormValue("mm_field_sub_affiliate_id"));
		
		if(isset($this->requestData["mm_field_coupon_code"]))
		{
			$coupon = MM_Coupon::getDataByCode($this->requestData["mm_field_coupon_code"]);
			
			if($coupon->isValid() && MM_Coupon::hasAvailableCoupon($coupon->getCouponCode()) && $coupon->hasProduct($product->getId()))
			{
				$this->order->addCoupon($coupon);
				
				if($coupon->getCouponType() == MM_Coupon::$TYPE_FREE)
				{
					$this->doComp = true;
				}
			}
		}
		
		$this->creditCardInfo = new MM_CardInfo();
		$this->creditCardInfo->setCardNumber($this->getCheckoutFormValue("mm_field_cc_number"));
		$this->creditCardInfo->setExpirationMonth($this->getCheckoutFormValue("mm_field_cc_exp_month"));
		$this->creditCardInfo->setExpirationYear($this->getCheckoutFormValue("mm_field_cc_exp_year"));
		$this->creditCardInfo->setCVV($this->getCheckoutFormValue("mm_field_cc_cvv"));
		
		// get custom field data
		foreach($this->requestData as $key=>$value)
		{
			if(preg_match("/(custom_)/", $key))
			{
				$customFieldId = preg_replace("/[^0-9]+/", "", $key);
				$this->customData[$customFieldId] = $value;
			}
		}
	}
	
	
	/**
	 * If the customer is checking out with an onsite payment service, the order is charged and the response is sent
	 * to the handleResult method. 
	 * 
	 * If the customer is checking out with an offsite payment service, a pending account is created for the customer
	 * and they're redirected to the offsite payment service site to complete their order.
	 * 
	 * @see MM_OrderRequest::submitRequest()
	 */
	public function submitRequest()
	{
		$requestStatus = $this->state;
		
		if(MM_Response::isSuccess($requestStatus))
		{	
			if($this->isFree)
			{
				$result = $this->order->commitData();
				
				if(MM_Response::isSuccess($result))
				{
					$this->saveCustomFieldData();
					$orderResult = new MM_PaymentServiceResponse();
				}
				else
				{
					$orderResult = new MM_PaymentServiceResponse($result->message, MM_PaymentServiceResponse::$ERROR);
				}
			}
			else if($this->isOnsiteRequest())
			{
				// mark account as pending for new members
				if($this->isNewMember)
				{
					$this->order->getCustomer()->setStatus(MM_Status::$PENDING);
					$this->order->getCustomer()->setStatusMessage("Customer account is pending confirmation from ".$this->paymentService->getName());
				
					// if purchased a membership, assign it to the user -- they won't be able to log in because the account
					// status is pending but it will be useful to know that they were attempting to sign up for
					if($this->membershipLevelId > 0)
					{
						$this->order->getCustomer()->setMembershipId($this->membershipLevelId);
					}
					else if(is_null($this->order->getCustomer()->getMembershipId()) || intval($this->order->getCustomer()->getMembershipId()) == 0)
					{
						if(!$this->isFree)
						{
							// check if a bundle is being purchased and if so apply the default membership level associated with the bundle
							$product = new MM_Product($this->requestData["mm_product_id"]);
							$bundle = $product->getAssociatedBundle();
							
							if($bundle->isValid())
							{
								$this->order->getCustomer()->setMembershipId($bundle->getDfltMembership()->getId());
							}
							else 
							{
								$this->order->getCustomer()->setMembershipId(MM_MembershipLevel::getDefaultMembership()->getId());
							}
						}
						else 
						{
							$this->order->getCustomer()->setMembershipId(MM_MembershipLevel::getDefaultMembership()->getId());
						}
					}
				
					$this->order->getCustomer()->commitData();
				}
				
				$result = $this->order->commitData();
				
				if(MM_Response::isSuccess($result))
				{
					$this->saveCustomFieldData();
					
					if($this->doComp)
					{
						$orderResult = new MM_PaymentServiceResponse();
					}
					else 
					{
						$orderResult = $this->paymentService->chargeOrder($this->order, $this->creditCardInfo);
					}
				}
				else
				{
					$orderResult = new MM_PaymentServiceResponse($result->message, MM_PaymentServiceResponse::$ERROR); 
				}
			}
			else if(!$this->isApiRequest)
			{
				// this is an offsite order request
				// mark account as pending for new members
				if($this->isNewMember)
				{
					$this->order->getCustomer()->setStatus(MM_Status::$PENDING);
					$this->order->getCustomer()->setStatusMessage("Customer account is pending confirmation from ".$this->paymentService->getName());
					
					// if purchased a membership, assign it to the user -- they won't be able to log in because the account
					// status is pending but it will be useful to know that they were attempting to sign up for
					if($this->membershipLevelId > 0)
					{
						$this->order->getCustomer()->setMembershipId($this->membershipLevelId);
					}
					else if(is_null($this->order->getCustomer()->getMembershipId()) || intval($this->order->getCustomer()->getMembershipId()) == 0)
					{
						$this->order->getCustomer()->setMembershipId(MM_MembershipLevel::getDefaultMembership()->getId());
					}
					
					$this->order->getCustomer()->commitData();
				}
	
				$result = $this->order->commitData();
				
				if(MM_Response::isSuccess($result))
				{
					$this->saveCustomFieldData();
					
					if($this->doComp)
					{
						$orderResult = new MM_PaymentServiceResponse();
					}
					else 
					{
						if($this->order->getTotal() > 0)
						{
							$this->redirectToOffsiteSerivce();
							exit;
						}
						else
						{
							// the current amount that needs to be paid is $0 so the customer may not need to 
							// be redirected to the offsite payment service. Check if there's a subscription 
							// that needs to be set up and if so, they'll still need to be sent to the offsite
							// payment service.
							$hasSubscription = false;
							$productItems = $this->order->getProducts();
							foreach ($productItems as $item) 
							{
								if($item->isRecurring())
								{
									$hasSubscription = true;
									break;
								}
							}
							
							if($hasSubscription)
							{
								$this->redirectToOffsiteSerivce();
								exit;
							}
							else 
							{
								// customer doesn't need to be sent to the offsite payment service since there's nothing
								// to pay for. As a result, a callback won't be made to update order status so we need to 
								// update it manually
								$this->order->setOrderStatus(MM_Order::$PAID_COMPLETE);
								$this->order->commitData();
								$orderResult = new MM_PaymentServiceResponse();
							}
						}
					}
				}
				else
				{
					$orderResult = new MM_PaymentServiceResponse($result->message, MM_PaymentServiceResponse::$ERROR);
				}
			}
		}
		else
		{
			$orderResult = new MM_PaymentServiceResponse($requestStatus->message, MM_PaymentServiceResponse::$ERROR);
		}
	
		if($this->isApiRequest)
		{
			return $this->handleResult($orderResult);
		}
		else
		{
			$this->handleResult($orderResult);
		}
	}
	
	
	/**
	 * This method handles the result of the order being charged in the submitRequest method. If the result is successful,
	 * the appropriate access rights will be granted to the customer based on what they purchased and they'll be 
	 * redirected to the appropriate confirmation page. If there was an error processing the order, the customer will be 
	 * redirected to the checkout page they came from with an error message passed.
	 * 
	 * @param MM_PaymentServiceResponse $result an instance of a response object that contains details about the result from the attempt to charge the order
	 * 
	 * @see MM_OrderRequest::handleResult()
	 */
	protected function handleResult($result)
	{
		if ($result->getStatus() == MM_PaymentServiceResponse::$SUCCESS)
		{
			$confirmationUrl = "";
			
			// handle free memberships
			if($this->isFree)
			{
				$membership = new MM_MembershipLevel($this->membershipLevelId);
				$assignAccessResult = MM_AccessControlEngine::assignMembershipToUser($this->order->getCustomer(), $membership);
				
				if(MM_Response::isSuccess($assignAccessResult))
				{
					$params['isFree'] = $membership->isFree();
					$params['refType'] = MM_TYPE_MEMBERSHIP_LEVEL;
					$params['refId'] = $membership->getId();
					
					$confirmationUrl = MM_CorePageEngine::getUrl(MM_CorePageType::$FREE_CONFIRMATION, $params);
				}
				else
				{
					$result->setStatus(MM_PaymentServiceResponse::$ERROR);
					$result->setMessage("Error creating free account.");
				}
			}
			
			// handle paid products
			else
			{
				$assignAccessResult = MM_AccessControlEngine::assignAccessFromOrder($this->order);
				
				if(MM_Response::isSuccess($assignAccessResult))
				{
					if($this->isNewMember && ($this->order->getCustomer()->getStatus() == MM_Status::$PENDING))
					{
						// If we've reached this point it means that it's a new account and the first thing they purchased was 
						// a product that had no access rights associated with it. In this case we need to mark the account as active
						$this->order->getCustomer()->setStatus(MM_Status::$ACTIVE);
						$this->order->getCustomer()->commitStatusOnly();
					}
					
					$confirmationUrl = MM_AccessControlEngine::getConfirmationUrlForOrder($this->order);
				}
				else
				{
					$result->setStatus(MM_PaymentServiceResponse::$ERROR);
					
					$msg = "Payment for order number {$this->order->getOrderNumber()} was successful but there was an error granting access to your content";
					
					if($assignAccessResult->message)
					{
						$msg .= ": ".$assignAccessResult->message;
					}
					
					$result->setMessage($msg);
				}
			}
			
			// if this is a customer support order, redirect the administrator back to the manage details page
			if($this->isCustomerSupportOrder)
			{
				$msg = urlencode("Order placed successfully");
				$confirmationUrl = MM_ModuleUtils::getUrl(MM_MODULE_MANAGE_MEMBERS, MM_MODULE_MEMBER_DETAILS_ACCESS_RIGHTS);
				$confirmationUrl .= "&user_id={$this->order->getCustomer()->getId()}&message={$msg}";
			}
			
			if(!$this->isApiRequest)
			{
				// redirect to confirmation page
				if($result->getStatus() == MM_PaymentServiceResponse::$SUCCESS && !empty($confirmationUrl))
				{
					wp_redirect($confirmationUrl);
					exit;
				}
				else
				{
					wp_redirect(MM_OptionUtils::getOption('site_url'));
					exit;
				}
			}
			else if($result->getStatus() == MM_PaymentServiceResponse::$SUCCESS && !empty($confirmationUrl))
			{
				$result = new MM_Response();
				$result->addData(MM_Response::$DATA_KEY_URL, $confirmationUrl);
				return $result;
			}
			
			// clear coupon
			MM_Session::clear(MM_Session::$KEY_LAST_COUPON_VALUE);
		}
		
		// this not an else if because it's possible that the $result status was changed in the block above from
		// success to error and this error should be handled the same way as a $result that had an error status prior
		// to calling this method.
		if ($result->getStatus() == MM_PaymentServiceResponse::$FAILED || $result->getStatus() == MM_PaymentServiceResponse::$ERROR)
		{
			if(!is_null($this->order) && !is_null($this->order->getCustomer()) && $this->order->getCustomer()->isValid() && $this->isNewMember)
			{
				$this->order->getCustomer()->setStatus(MM_Status::$ERROR);
				$this->order->getCustomer()->setStatusMessage($result->getMessage());
				$this->order->getCustomer()->commitStatusOnly();
			}
			
			if(!$this->isApiRequest)
			{
				// redirect the user back to the checkout page they came from if the URL is present,
				// otherwise redirect them to the default error page
				if($this->checkoutUrl != "")
				{
					// store POST data in session so it can be used to pre-populate the checkout form
					MM_Session::value(MM_Session::$KEY_CHECKOUT_FORM, serialize($this->requestData));
					
					$url = $this->checkoutUrl;
				}
				else
				{
					$url = MM_CorePageEngine::getUrl(MM_CorePageType::$ERROR);
				}
	
				$url = MM_Utils::appendUrlParam($url, MM_Session::$PARAM_MESSAGE_KEY, $result->getMessage(), true);
				wp_redirect($url);
				exit;
			}
			else
			{
				return new MM_Response($result->getMessage(), MM_Response::$ERROR);
			}
		}
	}
	
	
	/**
	 * This method redirects the customer to an offsite service, passing all of the data related to the order, and
	 * displays an intermediate splash screen informing them that they're being redirected.
	 */
	private function redirectToOffsiteSerivce()
	{
		$html = $this->paymentService->displayPaymentForm($this->order);
	
		?>
		<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
		<html xmlns="http://www.w3.org/1999/xhtml">
		<head>
		<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
		<title>Redirecting to <?php echo $this->paymentService->getName(); ?>...</title>
		
		<style>
		body{
			text-align:center;
			font:16px/1.4 Arial, Helvetica, sans-serif;
		}
		.wait{
			width:600px;
			margin:80px auto;
			border:5px solid #e5e5e5;
			border-radius:10px;
			padding:10px;
			position:relative;
		}
		.wait img{
			margin:10px;
		}
		.wait h1{
			font:bold 36px/1.4 Arial, Helvetica, sans-serif;
			color:#1B4875;
		}
		</style>
		</head>
		
		<body>
		<div class="wait">
		<h1>Please wait...</h1>
		<p>Please wait while we transfer you to <br /><?php echo $this->paymentService->getName(); ?> to complete your purchase.</p>
		</div>
		<?php echo $html; ?>
		</body>
		</html>
		<?php
	}
	
	
	private function saveCustomFieldData()
	{
		// save custom data
		foreach($this->customData as $fieldId=>$value)
		{
			$this->order->getCustomer()->setCustomData(intval($fieldId), stripslashes($value));
		}
	}
	
	
	/**
	 * In a checkout form it's possible for some values to be entered in either an input form
	 * field or a hidden form field. For example, if the form field is 'mm_field_billing_address', the
	 * data could either be in 'mm_field_billing_address' if the user entered it in or 'mm_field_billing_address_override'
	 * if the data came from a default value set in a hidden form field. This method takes the form data and a field name and
	 * returns the data that should be used based on what the user entered or if there's hidden form data.
	 *
	 * @param String $fieldName an associative array of data from the checkout form
	 * @return String the data from the form that should be use for the field name passed
	 */
	private function getCheckoutFormValue($fieldName)
	{
		$allowedHiddenFields = array("mm_field_password","mm_field_first_name","mm_field_last_name","mm_field_phone",
				"mm_field_billing_address","mm_field_billing_city", "mm_field_billing_state","mm_field_billing_zip",
				"mm_field_billing_country","mm_field_shipping_address","mm_field_shipping_city","mm_field_shipping_state",
				"mm_field_shipping_zip","mm_field_shipping_country",);
	
		$value = "";
		if(isset($this->requestData[$fieldName]) || isset($this->requestData[$fieldName."_override"]))
		{
			if(in_array($fieldName, $allowedHiddenFields) && isset($this->requestData[$fieldName."_override"]))
			{
				$value = $this->requestData[$fieldName."_override"];
			}
			else
			{
				$value = $this->requestData[$fieldName];
			}
		}
		return $value;
	}
	
	
	/**
	 * This method determines if the current payment service is an onsite service.
	 * 
	 * @return boolean a boolean indicating if the current payment service is an onsite service
	 */
	private function isOnsiteRequest()
	{
		if($this->paymentService && $this->paymentService instanceof MM_PaymentService)
		{
			return $this->paymentService->supportsFeature(MM_PaymentServiceFeatures::ONSITE_SERVICE);
		}
		
		return false;
	}
}
