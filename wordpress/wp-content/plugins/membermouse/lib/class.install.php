<?php
/**
 * 
 * MemberMouse(TM) (http://www.membermouse.com)
 * (c) MemberMouse, LLC. All rights reserved.
 * 
 * MM_Install handles all install/update related tasks. The master schema is located in data/install_sql.php. 
 * Key things to remember when working with the master schema: 
 * 1. The wordpress dbdelta function is used to keep the schema in sync across versions. 
 *    Formatting is very important, please reference the initial schema when adding new tables
 * 2. PRIMARY KEYs need to be declared on a separate line (vs inline with the column definition. Two spaces need to
 *    follow the words PRIMARY KEY and the definition of that key, otherwise the dbdelta will fail
 * 3. FOREIGN KEYs are not currently supported and can potentially cause dbdeltas to fail.
 * 4. Each column or key definition needs to be on its own line. Lines are delimited by \n (unix-style newline)
 * 5. dbdelta() currently doesn't properly deal with backticks surrounding the column name in KEY definitions
 * 6. dbdelta() will add columns to existing tables, but will not drop removed columns. Those operations will need to be done manually 
 * 
 * With a properly formatted schema, the database structure will be synced to the schema on both install and update, eliminating the need for
 * version-specific update code and different code for installs vs updates. Default data with specified keys (either primary keys or unique column values) 
 * is inserted using INSERT IGNORE sql statements. This handles both insert and update scenarios because duplicate key errors are ignored if the data already exists.
 * 
 */
require_once(ABSPATH.'wp-admin/includes/upgrade.php');

 class MM_Install
 {
 	function __construct()
 	{
 		//default constructor
 	}
 	
 	public function activate()
 	{
 		global $wpdb;
 		ob_start();
 		
 		if(!defined("MM_TABLE_BUNDLES")) 
 		{
 			require_once(ABSPATH."wp-content/plugins/".MM_PLUGIN_NAME."/includes/mm-constants.php");
 		}
 		
 		$error = "";
 		
	 	if($this->createDBCache())
	 	{
	 		if($this->updateMemberMouseClass())
	 		{
	 			// reset minor version if this is a major version upgrade
	 			$crntMajorVersion = MM_MemberMouseService::getPluginVersion();
	 			$lastMajorVersion = MM_OptionUtils::getOption(MM_OptionUtils::$OPTION_KEY_MAJOR_VERSION);
	 			if (!empty($lastMajorVersion) && (version_compare($lastMajorVersion, $crntMajorVersion) < 0))
	 			{	
	 				MM_OptionUtils::setOption(MM_OptionUtils::$OPTION_KEY_MINOR_VERSION, MM_MemberMouseService::$DEFAULT_MINOR_VERSION); 
	 			}
	 			
		 		if($this->authenticateWithMM() !== false)
		 		{
		 			if($this->alterMMTables())
		 			{
		 				$this->temporaryStripePatch();
		 				if($this->insertMMDefaultData())
		 				{	 							
		 					// set new major version
		 					$crntMajorVersion = MM_MemberMouseService::getPluginVersion();
		 					MM_OptionUtils::setOption(MM_OptionUtils::$OPTION_KEY_MAJOR_VERSION, $crntMajorVersion);
		 					
		 					//update version history
		 					$versionDescription = $crntMajorVersion;
		 					$minorVersion = MM_OptionUtils::getOption(MM_OptionUtils::$OPTION_KEY_MINOR_VERSION);
		 					
		 					if($minorVersion !== false && intval($minorVersion) > 0)
		 					{
		 						$versionDescription .= "-".$minorVersion;
		 					}
		 					else
		 					{
		 						$versionDescription .= "-".MM_MemberMouseService::$DEFAULT_MINOR_VERSION;
		 					}
		 					
 							$versionRelease = MM_VersionRelease::findByVersion($versionDescription);
 							$versionRelease->setVersion($versionDescription);
 							$versionRelease->commitData();
 							
 							MM_MemberMouseService::activatePlugin();
 							
 							// clear major version notice
 							$crntMajorVersion = MM_MemberMouseService::getPluginVersion();
 							$upgradeVersion = MM_OptionUtils::setOption(MM_OptionUtils::$OPTION_KEY_UPGRADE_NOTICE);
 							if(!empty($upgradeVersion) && (version_compare($crntMajorVersion, $upgradeVersion, ">=")))
 							{
 								MM_OptionUtils::setOption(MM_OptionUtils::$OPTION_KEY_UPGRADE_NOTICE, "");
 							}
 							
 							ob_end_clean();
	 						return true;	
		 				}
				 		else 
				 		{
	 						$error = "Could not install default data.";
				 		}
		 			}
			 		else 
			 		{
	 					$error = "Could not alter MemberMouse tables.";
			 		}
		 		}
		 		else 
		 		{
		 			$error = "<div style='font-family: sans-serif; font-size: 13px;'>";
		 			
		 			$error .= "<h3 style='color:#BC0B0B; margin-top:0px; margin-bottom:5px; font-size: 14px;'>This site is not authorized to use the MemberMouse plugin</h3>";
		 			
		 			$error .= "<p style='margin-top:0px; margin-bottom:5px;'>In order to use the MemberMouse plugin you need to <a href=\"http://support.membermouse.com/customer/portal/articles/1046669-installing-membermouse\" target=\_blank\">register your site with membermouse.com</a>.</p>";
		 			
		 			$error .= "</div>";
		 		}
	 		}
	 		else 
	 		{
	 			$error = "Could not insert MM_MemberMouseService into DB cache";
	 		}
	 		
		}
		else 
		{
			$error = "Could not create DB cache";
		}
 		
	 	ob_end_clean();
	 	
 		// an error occurred so deactivate the plugin
		$this->showError($error);
		exit;
 	}
 	
 	
 	private function showError($error)
 	{
		$vars = new stdClass();
		$vars->content = $error;
		echo $error; 
		@deactivate_plugins(ABSPATH."wp-content/plugins/".MM_PLUGIN_NAME."/index.php", false);
 	}
 	
 	
 	private function createDBCache()
 	{
 		global $wpdb;
 		
 		require_once(ABSPATH.'wp-content/plugins/'.MM_PLUGIN_NAME."/data/db_cache_sql.php");
 	
		if(isset($sql) && count($sql) > 0)
		{
			foreach($sql as $query)
			{
				try
				{
					$result = $wpdb->query($query);
					if(!$result) 
					{
						return false;
					}
				}
				catch(Exception $e)
				{
					return false;
				}
			}
			
			$countSql = "select count(*) as total from ".MM_TABLE_CONTAINER." where name='membermouseservice'";
			$row = $wpdb->get_row($countSql);
			
			if($row===false)
			{
				return false;
			}	
		}
		
		return true;
 	}
 	
 	public function updateMemberMouseClass()
 	{
 		global $wpdb;
 		
 		$removeSql = "DELETE FROM ".MM_TABLE_CONTAINER." WHERE name='membermouseservice'";
		$row = $wpdb->get_row($removeSql);
		$wpdb->query($removeSql);
		
		$addSql = "INSERT INTO ".MM_TABLE_CONTAINER." (name, obj, is_system, date_added) values ('membermouseservice', '', '1', NOW());";
		if($wpdb->query($addSql) === false)
		{	
			return false;
		}
		return true;
 	}
 	
 	public function authenticateWithMM()
 	{
 		if(class_exists("MM_MemberMouseService"))
 		{
	 		return MM_MemberMouseService::authorize();
 		}
 		return false;
 	}
 	
 	private function alterMMTables()
 	{
 		global $wpdb;
 		
 		$filename = "install_sql";
 		require_once(ABSPATH.'wp-content/plugins/'.MM_PLUGIN_NAME."/data/{$filename}.php");	

		if (isset($sql) && count($sql)>0)
		{
			dbdelta($sql);
		}
		
 		return true;
 	} 	
 	
 	private function hasRecords($table, $column, $where)
 	{
 		global $wpdb;
 		
 		$sql = "select count(*) as total from {$table} where {$column}='".addslashes($where)."'"; 
 		$row = $wpdb->get_row($sql);
 		return ($row->total>0);
 	}
 	
 	
 	private function insertMMDefaultData()
 	{
 		global $wpdb, $current_user;
		
 		// insert default option values
		MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_ACCT_SECURITY_ENABLED, MM_OptionUtils::$DEFAULT_ACCT_SECURITY_ENABLED);
		MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_ACCT_SECURITY_MAX_IPS, MM_OptionUtils::$DEFAULT_ACCT_SECURITY_MAX_IPS);
		MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_ON_LOGIN_USE_WP_FRONTPAGE, MM_OptionUtils::$DEFAULT_ON_LOGIN_USE_WP_FRONTPAGE);
		MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_AFTER_LOGIN_USE_WP_FRONTPAGE, MM_OptionUtils::$DEFAULT_AFTER_LOGIN_USE_WP_FRONTPAGE);
		MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_SHOW_LOGIN_LOGOUT_LINK, MM_OptionUtils::$DEFAULT_SHOW_LOGIN_LOGOUT_LINK);
		MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_HIDE_PROTECTED_MENU_ITEMS, MM_OptionUtils::$DEFAULT_HIDE_PROTECTED_MENU_ITEMS);
		MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_COUNTRY_SELECTIONS, MM_OptionUtils::$DEFAULT_COUNTRY_SELECTIONS);
		MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_FORGOT_PASSWORD_SUBJECT, MM_OptionUtils::$DEFAULT_FORGOT_PASSWORD_SUBJECT);
		MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_FORGOT_PASSWORD_BODY, MM_OptionUtils::$DEFAULT_FORGOT_PASSWORD_BODY);
		MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_AFFILIATE, MM_OptionUtils::$DEFAULT_AFFILIATE);
		MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_SUB_AFFILIATE, MM_OptionUtils::$DEFAULT_SUB_AFFILIATE);
		MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_AFFILIATE_LIFESPAN, MM_OptionUtils::$DEFAULT_AFFILIATE_LIFESPAN);
		MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_LOGIN_TOKEN_LIFESPAN, MM_OptionUtils::$DEFAULT_LOGIN_TOKEN_LIFESPAN);
		MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_USE_CHECKOUT_FORM_TEST_DATA, MM_OptionUtils::$DEFAULT_USE_CHECKOUT_FORM_TEST_DATA);
		MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_PURCHASE_CONFIRMATION_DIALOG_WIDTH, MM_OptionUtils::$DEFAULT_PURCHASE_CONFIRMATION_DIALOG_WIDTH);
		MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_PURCHASE_CONFIRMATION_DIALOG_HEIGHT, MM_OptionUtils::$DEFAULT_PURCHASE_CONFIRMATION_DIALOG_HEIGHT);
		MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_DEFAULT_CHECKOUT_ITEM_TYPE, MM_OptionUtils::$DEFAULT_CHECKOUT_ITEM_TYPE);
		MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_DEFAULT_CHECKOUT_ITEM_ID, MM_OptionUtils::$DEFAULT_CHECKOUT_ITEM_ID);
		MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_SHOW_PREVIEW_BAR, MM_OptionUtils::$DEFAULT_SHOW_PREVIEW_BAR);
		MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_HIDE_ADMIN_BAR, MM_OptionUtils::$DEFAULT_HIDE_ADMIN_BAR);
		MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_ALLOW_LOGGED_OUT_PURCHASES, MM_OptionUtils::$DEFAULT_ALLOW_LOGGED_OUT_PURCHASES);
		MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_CHECKOUT_PAID_MESSAGE, MM_OptionUtils::$DEFAULT_CHECKOUT_PAID_MESSAGE);
		MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_CHECKOUT_FREE_MESSAGE, MM_OptionUtils::$DEFAULT_CHECKOUT_FREE_MESSAGE);
		MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_CHECKOUT_MESSAGE_CSS, MM_OptionUtils::$DEFAULT_CHECKOUT_MESSAGE_CSS);
		MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_CURRENCY, MM_OptionUtils::$DEFAULT_CURRENCY);
		
		// options that vary based on if this is an upgrade versus a new install
		$lastMajorVersion = MM_OptionUtils::getOption(MM_OptionUtils::$OPTION_KEY_MAJOR_VERSION);
		
		if(empty($lastMajorVersion))
		{
			// set options for new installs
			// for 2.0.7 release
			MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_DISABLE_EXPLICIT_LINKS, MM_OptionUtils::$DEFAULT_DISABLE_EXPLICIT_LINKS);
			MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_PURCHASE_LINK_STYLE, MM_OptionUtils::$DEFAULT_PURCHASE_LINK_STYLE);
			
			// for 2.0.8 release
			MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_SMARTTAG_VERSION, MM_OptionUtils::$DEFAULT_SMARTTAG_VERSION);
		}
		else
		{
			// set options for existing installs
			// for 2.0.7 release
			MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_DISABLE_EXPLICIT_LINKS, "0");
			MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_PURCHASE_LINK_STYLE, MM_LINK_STYLE_EXPLICIT);
			
			// for 2.0.8 release
			MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_SMARTTAG_VERSION, "2.0");
		}
		
 		$sql = array();
 		
 		MM_Role::addRoles();
 		
	 	// create default employee account if one doesn't exist, using the current user
	 	$install_sql = "select * from ".MM_TABLE_EMPLOYEE_ACCOUNTS." where is_default='1' LIMIT 1;";
	 	$row = $wpdb->get_row($install_sql);
	 	if($row == null)
	 	{
	 		//the current user isn't an employee
	 		$install_sql = "insert into ".MM_TABLE_EMPLOYEE_ACCOUNTS." set display_name='%s', email='%s', is_default='%d', role_id='%s', user_id='%d'";
	 		$displayName = (!empty($current_user->display_name)) ? $current_user->display_name : "Support";
	 		$wpdb->query($wpdb->prepare($install_sql, $displayName, $current_user->user_email, 1, MM_Role::$ROLE_ADMINISTRATOR, $current_user->ID));
	 		$emailId = $wpdb->insert_id;
	 	}
	 	else 
	 	{
	 		$emailId = $row->id;
	 	}
	 	
	 	// install default overdue payment notification email
	 	$crntValue = MM_OptionUtils::getOption(MM_OptionUtils::$OPTION_KEY_OVERDUE_PAYMENT_NOTIFICATION_INSTALLED);
	 	if($crntValue === false || $crntValue === "")
	 	{
	 		$action = new MM_Action();
	 		$action->setEventType(MM_Event::$MEMBER_STATUS_CHANGE);
	 		$action->setActionType(MM_Action::$MM_ACTION_SEND_EMAIL);
	 			
	 		$emailToId = MM_Action::$CURRENT_MEMBER_PLACEHOLDER;
	 		$emailFromId = $emailId;
	 		$emailCC = "";
	 		$emailSubject = MM_OptionUtils::$DEFAULT_OVERDUE_PAYMENT_SUBJECT;
	 		$emailBody = MM_OptionUtils::$DEFAULT_OVERDUE_PAYMENT_BODY;
	 		$action->setActionValue(MM_Action::prepareSendEmailValue($emailToId, $emailFromId, $emailCC, $emailSubject, $emailBody));
	 			
	 		// set attributes
	 		$attributes = array();
	 		$attributes["status_id"] = MM_Status::$OVERDUE;
	 		$action->setEventAttributes($attributes);
	 		
	 		$result = $action->commitData();
	 		
	 		if(MM_Response::isSuccess($result))
	 		{
	 			MM_OptionUtils::setOption(MM_OptionUtils::$OPTION_KEY_OVERDUE_PAYMENT_NOTIFICATION_INSTALLED, "1");
	 		}
	 	}
	 	
 		// create default membership level
	 	if(!$this->hasRecords(MM_TABLE_MEMBERSHIP_LEVELS, 'is_default', '1'))
	 	{
		 	$install_sql = "INSERT INTO ".MM_TABLE_MEMBERSHIP_LEVELS." SET " .
			 			"	name = 'Free Membership'," .
			 			"	is_free='1'," .
			 			"	is_default='1'," .
			 			"	status='1'," .
			 			"	description='Default Free Membership'," .
			 			"	email_subject='%s'," .
			 			"	email_body='%s'," .
			 			"	email_from_id='%d'" .
			 			"";
		 	
		 	$wpdb->query($wpdb->prepare($install_sql, MM_MembershipLevel::$DFLT_EMAIL_SUBJECT, MM_MembershipLevel::$DFLT_EMAIL_BODY, $emailId));
	 	}
	 	
	 	// create default commission profile
	 	if(!$this->hasRecords(MM_TABLE_COMMISSION_PROFILES, 'is_default', '1'))
	 	{
	 		$install_sql = "INSERT INTO ".MM_TABLE_COMMISSION_PROFILES." SET " .
	 				"	name = 'Standard Commission Profile'," .
		 			"	is_default='1'," .
		 			"	description='This is the default commission profile'," .
		 			"	initial_commission_enabled='1'," .
		 			"	rebill_commissions_enabled='0'," .
		 			"	rebill_commission_type='default'," .
		 			"	rebill_commission_value='0'," .
		 			"	do_limit_rebill_commissions='0'," .
		 			"	rebill_commission_limit='0', " .
		 			"	do_reverse_commissions='1'" .
	 				"";
	 	
	 		$wpdb->query($wpdb->prepare($install_sql));
	 	}
	 	
 		foreach($sql as $query)
 		{
 			if($wpdb->query($query) === false)
 			{
 				return false;
 			}
 		} 		
 		unset($sql);
 		
 		//add smart tags
	 	$this->addSmartTags();
	 	
	 	$sql = "select count(*) as total from ".MM_TABLE_API_KEYS;
	 	$row = $wpdb->get_row($sql);
	 	
	 	if($row->total<=0)
	 	{
	 		$sql = "insert into ".MM_TABLE_API_KEYS." set ".
		 		   "name='Default Access', ".
		 		   "api_key='".MM_Utils::createRandomString(10)."',	".
		 		   "api_secret='".MM_Utils::createRandomString(10)."', ".
		 		   "status='1'";
	 		
		 	$wpdb->query($sql);
	 	}
	 	
	 	$sql = array();
	 	require_once(ABSPATH.'wp-content/plugins/'.MM_PLUGIN_NAME."/data/countries.sql.php");
	 	$numCountries = count($sql);
	 	$countryCheckSql = "select count(*) as total from ".MM_TABLE_COUNTRIES;
	 	$row = $wpdb->get_row($countryCheckSql);
	 	if ($row->total < $numCountries)
	 	{
	 		foreach ($sql as $query)
	 		{
	 			if($wpdb->query($query) === false)
	 			{
	 				return false;
	 			}
	 		}
	 	}
	 	unset($sql);
	 	
	 	$result = $this->setupCorePages();
	 	
	 	if(!$result)
	 	{
	 		return false;
	 	}
	 	
	 	$cacheWriteable = @MM_Utils::cacheIsWriteable();
	 		
	 	$sql = array();
	 		
	 	//TODO TRANSIENT: in version 2.0.1 renamed WordPress Mail to None. Once all customers have been upgraded to None then this 
	 	// if statement can be removed
	 	if($this->hasRecords(MM_TABLE_EMAIL_SERVICE_PROVIDERS, 'provider_token', 'default'))
	 	{
	 		$sql[] = "UPDATE ".MM_TABLE_EMAIL_SERVICE_PROVIDERS." SET provider_name='None' WHERE provider_token='default';";
	 	}
	 	else 
	 	{
	 		$sql[] = "INSERT IGNORE INTO ".MM_TABLE_EMAIL_SERVICE_PROVIDERS." SET provider_name='None', provider_token='default', active='1';";
	 	}
	 	
	 	//email service providers
	 	$sql[] = "INSERT IGNORE INTO ".MM_TABLE_EMAIL_SERVICE_PROVIDERS." SET provider_name='MailChimp', provider_token='mailchimp', active='0';";
	 	$sql[] = "INSERT IGNORE INTO ".MM_TABLE_EMAIL_SERVICE_PROVIDERS." SET provider_name='iContact', provider_token='icontact', api_key='".MM_IContactEmailServiceProvider::$API_KEY."'";
	 	$sql[] = "INSERT IGNORE INTO ".MM_TABLE_EMAIL_SERVICE_PROVIDERS." SET provider_name='AWeber', provider_token='aweber', active='0';";
	 	$sql[] = "INSERT IGNORE INTO ".MM_TABLE_EMAIL_SERVICE_PROVIDERS." SET provider_name='GetResponse', provider_token='getresponse', active='0';";
	 	
	 	//affiliate providers
	 	$sql[] = "INSERT IGNORE INTO ".MM_TABLE_AFFILIATE_PROVIDERS." SET provider_name='None', provider_token='default', active='1';";
	 	$sql[] = "INSERT IGNORE INTO ".MM_TABLE_AFFILIATE_PROVIDERS." SET provider_name='iDevAffiliate', provider_token='idevaffiliate';";
	 		
	 	//payment services
	 	$sql[] = "INSERT IGNORE INTO ".MM_TABLE_PAYMENT_SERVICES." SET token='PAYPAL', name='PayPal', settings='', active='0';";
	 	$sql[] = "INSERT IGNORE INTO ".MM_TABLE_PAYMENT_SERVICES." SET token='AUTHORIZENET', name='Authorize.net', settings='', active='0';";
	 	$sql[] = "INSERT IGNORE INTO ".MM_TABLE_PAYMENT_SERVICES." SET token='BRAINTREE', name='Braintree', settings='', active='0';";
	 	$sql[] = "INSERT IGNORE INTO ".MM_TABLE_PAYMENT_SERVICES." SET token='CHARGIFY', name='Chargify', settings='', active='0';";
	 	$sql[] = "INSERT IGNORE INTO ".MM_TABLE_PAYMENT_SERVICES." SET token='STRIPE', name='Stripe', settings='', active='0';";
	 	$sql[] = "INSERT IGNORE INTO ".MM_TABLE_PAYMENT_SERVICES." SET token='CLICKBANK', name='ClickBank', settings='', active='0';";
	 	
	 	//shipping methods
	 	$sql[] = "INSERT IGNORE INTO ".MM_TABLE_SHIPPING_METHODS." SET token='FLATRATE', name='Flat Rate', settings='', active='1';"; //active by default
	 	
	 	foreach ($sql as $query)
	 	{
	 		$wpdb->query($query);
	 	}
	 	unset($sql);
	 	
	 	//apply any updates that may have been made to the schemas of the active payment services
	 	$activePaymentServices = MM_PaymentServiceFactory::getAvailablePaymentServices();
	 	foreach ($activePaymentServices as $ps)
	 	{
	 		$ps->install();
	 	}
	 	
	 	return true;
 	}
 	
 	
 	private function setupCorePages()
 	{
 		global $wpdb, $current_user;
 		
 		// Core Page Types
	 	$sql[] = "INSERT IGNORE INTO ".MM_TABLE_CORE_PAGE_TYPES." (id, name, visible) VALUES ('".MM_CorePageType::$MEMBER_HOME_PAGE."','Member Home','1');";
	 	$sql[] = "INSERT IGNORE INTO ".MM_TABLE_CORE_PAGE_TYPES." (id, name, visible) VALUES ('".MM_CorePageType::$SAVETHESALE."','Save the Sale','1');";
 		$sql[] = "INSERT IGNORE INTO ".MM_TABLE_CORE_PAGE_TYPES." (id, name, visible) VALUES ('".MM_CorePageType::$ERROR."','Error','1');";
 		$sql[] = "INSERT IGNORE INTO ".MM_TABLE_CORE_PAGE_TYPES." (id, name, visible) VALUES ('".MM_CorePageType::$LOGIN_PAGE."','Login','1');";
 		$sql[] = "INSERT IGNORE INTO ".MM_TABLE_CORE_PAGE_TYPES." (id, name, visible) VALUES ('".MM_CorePageType::$FORGOT_PASSWORD."','Forgot Password','1');";
 		$sql[] = "INSERT IGNORE INTO ".MM_TABLE_CORE_PAGE_TYPES." (id, name, visible) VALUES ('".MM_CorePageType::$CHECKOUT."','Checkout','1');";
 		$sql[] = "INSERT IGNORE INTO ".MM_TABLE_CORE_PAGE_TYPES." (id, name, visible) VALUES ('".MM_CorePageType::$PAID_CONFIRMATION."','Confirmation','1');";
 		$sql[] = "INSERT IGNORE INTO ".MM_TABLE_CORE_PAGE_TYPES." (id, name, visible) VALUES ('".MM_CorePageType::$FREE_CONFIRMATION."','Free Confirmation','0');";
 		$sql[] = "INSERT IGNORE INTO ".MM_TABLE_CORE_PAGE_TYPES." (id, name, visible) VALUES ('".MM_CorePageType::$MY_ACCOUNT."','My Account','1');";
 		$sql[] = "INSERT IGNORE INTO ".MM_TABLE_CORE_PAGE_TYPES." (id, name, visible) VALUES ('".MM_CorePageType::$LOGOUT_PAGE."','Logout','1');";
 			
	 	// Default Core Pages
 		$sql[] ="INSERT IGNORE INTO ".MM_TABLE_CORE_PAGES." (id, core_page_type_id) VALUES ('1', '".MM_CorePageType::$MEMBER_HOME_PAGE."');";
 		$sql[] ="INSERT IGNORE INTO ".MM_TABLE_CORE_PAGES." (id, core_page_type_id) VALUES ('2', '".MM_CorePageType::$SAVETHESALE."');";
 		$sql[] ="INSERT IGNORE INTO ".MM_TABLE_CORE_PAGES." (id, core_page_type_id) VALUES ('3', '".MM_CorePageType::$ERROR."');";
 		$sql[] ="INSERT IGNORE INTO ".MM_TABLE_CORE_PAGES." (id, core_page_type_id) VALUES ('4', '".MM_CorePageType::$LOGIN_PAGE."');";
 		$sql[] ="INSERT IGNORE INTO ".MM_TABLE_CORE_PAGES." (id, core_page_type_id) VALUES ('5', '".MM_CorePageType::$FORGOT_PASSWORD."');";
 		$sql[] ="INSERT IGNORE INTO ".MM_TABLE_CORE_PAGES." (id, core_page_type_id) VALUES ('6', '".MM_CorePageType::$CHECKOUT."');";
 		$sql[] ="INSERT IGNORE INTO ".MM_TABLE_CORE_PAGES." (id, core_page_type_id) VALUES ('7', '".MM_CorePageType::$PAID_CONFIRMATION."');";
 		$sql[] ="INSERT IGNORE INTO ".MM_TABLE_CORE_PAGES." (id, core_page_type_id) VALUES ('9', '".MM_CorePageType::$FREE_CONFIRMATION."');";
 		$sql[] ="INSERT IGNORE INTO ".MM_TABLE_CORE_PAGES." (id, core_page_type_id) VALUES ('10', '".MM_CorePageType::$MY_ACCOUNT."');";
 		$sql[] ="INSERT IGNORE INTO ".MM_TABLE_CORE_PAGES." (id, core_page_type_id) VALUES ('11', '".MM_CorePageType::$LOGOUT_PAGE."');";
	 	
	 	foreach($sql as $query)
	 	{
	 		if($wpdb->query($query) === false)
	 		{
	 			echo $query;
	 			return false;
	 		}
	 	}
	 	unset($sql);
 		
	 	///wp-posts pages	
 		$install_sql = "select count(*) as total from ".MM_TABLE_CORE_PAGES." where page_id IS NOT NULL ";
 		$row = $wpdb->get_row($install_sql);
	 	
	 	if($row->total <= 0)
	 	{	
	 		$templateParams = new stdClass();
	 		$templateParams->resourceDirectory = MM_RESOURCES_URL;
	 		$mm_template_base= ABSPATH."wp-content/plugins/".MM_PLUGIN_NAME."/templates";
	 		$sql = "insert into {$wpdb->posts} (post_type, post_author, post_date, post_status,post_content, post_title, post_name) " .
	 				"		values ('page',$current_user->ID, NOW(), 'publish','".addslashes(MM_TEMPLATE::generate($mm_template_base."/default_templates/homepage.html.php", $templateParams))."', '[MM_Member_Data name=\"membershipName\"] Home Page', '".$this->getPostName('home')."');";
	 		
 			if(!$wpdb->query($sql))
 			{
 				echo $query;
 				return false;
 			}
 			
 			$this->linkCorePage($wpdb->insert_id, MM_CorePageType::$MEMBER_HOME_PAGE);
	 		
	 		$sql = "insert into {$wpdb->posts} (post_type, post_author, post_date, post_status,post_content, post_title, post_name) " .
	 				"		values ('page',$current_user->ID, NOW(), 'publish','".addslashes(MM_TEMPLATE::generate($mm_template_base."/default_templates/cancel.html.php", $templateParams))."', 'Cancel Membership', '".$this->getPostName('cancel')."');";
	 			
	 		if(!$wpdb->query($sql))
 			{
 				echo $query;
 				return false;
 			}
 			
 			$this->linkCorePage($wpdb->insert_id, MM_CorePageType::$SAVETHESALE);
	 		
	 		$sql = "insert into {$wpdb->posts} (post_type, post_author, post_date, post_status,post_content, post_title, post_name) " .
	 				"		values ('page',$current_user->ID, NOW(), 'publish','".addslashes(MM_TEMPLATE::generate($mm_template_base."/default_templates/error.html.php", $templateParams))."', 'Error', '".$this->getPostName('mm-error')."');";
	 			
	 		if(!$wpdb->query($sql))
 			{
 				echo $query;
 				return false;
 			}
 			
 			$this->linkCorePage($wpdb->insert_id, MM_CorePageType::$ERROR);
	 		
	 		$sql = "insert into {$wpdb->posts} (post_type, post_author, post_date, post_status,post_content, post_title, post_name) " .
	 				"		values ('page',$current_user->ID, NOW(), 'publish','".addslashes(MM_TEMPLATE::generate($mm_template_base."/default_templates/login.html.php", $templateParams))."', 'Login', '".$this->getPostName('login')."');";
	 			
	 		if(!$wpdb->query($sql))
 			{
 				echo $query;
 				return false;
 			}
 			
 			$this->linkCorePage($wpdb->insert_id, MM_CorePageType::$LOGIN_PAGE);
	 		
	 		$sql = "insert into {$wpdb->posts} (post_type, post_author, post_date, post_status,post_content, post_title, post_name) " .
	 				"		values ('page',$current_user->ID, NOW(), 'publish','".addslashes(MM_TEMPLATE::generate($mm_template_base."/default_templates/logout.html.php", $templateParams))."', 'Logout', '".$this->getPostName('logout')."');";
	 			
	 		if(!$wpdb->query($sql))
 			{
 				echo $query;
 				return false;
 			}
 			
 			$this->linkCorePage($wpdb->insert_id, MM_CorePageType::$LOGOUT_PAGE);
	 		
	 		$sql = "insert into {$wpdb->posts} (post_type, post_author, post_date, post_status,post_content, post_title, post_name) " .
	 				"		values ('page',$current_user->ID, NOW(), 'publish','".addslashes(MM_TEMPLATE::generate($mm_template_base."/default_templates/forgotpassword.html.php", $templateParams))."', 'Forgot Password', '".$this->getPostName('forgot-password')."');";
	 			
	 		if(!$wpdb->query($sql))
 			{
 				echo $query;
 				return false;
 			}
 			
 			$this->linkCorePage($wpdb->insert_id, MM_CorePageType::$FORGOT_PASSWORD);
 			
	 		$sql = "insert into {$wpdb->posts} (post_type, post_author, post_date, post_status,post_content, post_title, post_name) " .
	 				"		values ('page',$current_user->ID, NOW(), 'publish','".addslashes(MM_TEMPLATE::generate($mm_template_base."/default_templates/checkout.html.php", $templateParams))."', 'Checkout', '".$this->getPostName('checkout')."');";
	 			
	 		if(!$wpdb->query($sql))
 			{
 				echo $query;
 				return false;
 			}
 			
 			$this->linkCorePage($wpdb->insert_id, MM_CorePageType::$CHECKOUT);
	 		
	 		$sql = "insert into {$wpdb->posts} (post_type, post_author, post_date, post_status,post_content, post_title, post_name) " .
	 				"		values ('page',$current_user->ID, NOW(), 'publish','".addslashes(MM_TEMPLATE::generate($mm_template_base."/default_templates/myaccount.html.php", $templateParams))."', 'My Account', '".$this->getPostName('myaccount')."');";
	 			
	 		if(!$wpdb->query($sql))
 			{
 				echo $query;
 				return false;
 			}
 			
 			$this->linkCorePage($wpdb->insert_id, MM_CorePageType::$MY_ACCOUNT);
	 		
	 		$sql = "insert into {$wpdb->posts} (post_type, post_author, post_date, post_status,post_content, post_title, post_name) " .
	 				"		values ('page',$current_user->ID, NOW(), 'publish','".addslashes(MM_TEMPLATE::generate($mm_template_base."/default_templates/confirmation.html.php", $templateParams))."', 'Thank You', '".$this->getPostName('confirmation')."');";
	 			
	 		if(!$wpdb->query($sql))
 			{
 				echo $query;
 				return false;
 			}
 			
 			$this->linkCorePage($wpdb->insert_id, MM_CorePageType::$PAID_CONFIRMATION);
	 	}
	 	
 		return true;
 	}
 	
 	private function addSmartTags()
 	{
 		global $wpdb;
 		require_once(ABSPATH.'wp-content/plugins/'.MM_PLUGIN_NAME."/data/smarttags.sql.php");
 		if(isset($sql) && is_array($sql))
 		{
 			foreach($sql as $query)
 			{
 				if($wpdb->query($query)===false){ 
 					return false;	
 				}
 			}
 		}
 		return true;
 	}
 	
 	private function getPostName($suggestedName=""){
 		global $wpdb;
 		$sql = "select count(*) as total from {$wpdb->posts} where post_name='".$suggestedName."'";
 		$row = $wpdb->get_row($sql);
 		if($row->total>0){
	 		$sql = "select post_name from {$wpdb->posts} where post_name like '".$suggestedName."-%'";
	 		$rows = $wpdb->get_results($sql);
	 		
	 		$index=1;
	 		while(true){
	 			$newName = $suggestedName."-".$index;
	 			$hasName = false;
	 			foreach($rows as $row){
	 				if($row->post_name == $newName){
	 					$hasName = true;		
	 				}
	 			}
	 			if(!$hasName){
	 				return $newName;
	 			}
	 			$index++;
	 		}
 		}
 		return $suggestedName;
 	}
 	
 	private function linkCorePage($page_id, $id)
 	{
		global $wpdb;
		$sql = "update ".MM_TABLE_CORE_PAGES." set page_id='{$page_id}' where id='{$id}'";
		
		if(!$wpdb->query($sql))
		{
			echo $sql;
			return false;
		}
 	}
 	
	private function field_exists($column, $table)
	{
		global $wpdb;
		$sql = "describe {$table}";
		$rows = $wpdb->get_results($sql);
	
		for($i=0; $i<count($rows); $i++)
		{
			if($column == $rows[$i]->Field)
			{
				return true;
			}
		}
		
		return false;
	}
	
	private function getFieldType($column, $table)
	{
		global $wpdb;
		$sql = "describe {$table}";
		$rows = $wpdb->get_results($sql);
		
		$numRows = count($rows);
		for($i=0; $i<$numRows; $i++)
		{
			if($column == $rows[$i]->Field)
			{
				return $rows[$i]->Type;
			}
		}
		
		return false;
	}
	
	private function temporaryStripePatch()
	{
		global $wpdb;
		
		if ($this->field_exists("scheduled_event_id", MM_TABLE_SCHEDULED_PAYMENTS))
		{
			$outOfSync = $wpdb->get_var("SELECT count(*) FROM ".MM_TABLE_SCHEDULED_PAYMENTS." WHERE scheduled_event_id != id");
			if (($outOfSync != null) && ($outOfSync > 0))
			{
				$wpdb->query("ALTER TABLE ".MM_TABLE_SCHEDULED_PAYMENTS." CHANGE id id BIGINT(20) UNSIGNED NOT NULL");
				$wpdb->query("DROP INDEX mm_scheduled_payments_event_id_fk_idx ON ".MM_TABLE_SCHEDULED_PAYMENTS);
				$maxes = $wpdb->get_row("select max(id) as id_max, max(scheduled_event_id) AS event_max FROM ".MM_TABLE_SCHEDULED_PAYMENTS);
				$patchDirection = ($maxes->event_max >= $maxes->id_max)?"DESC":"ASC";
				$scheduledPayments = $wpdb->get_results("SELECT id,scheduled_event_id FROM ".MM_TABLE_SCHEDULED_PAYMENTS." ORDER BY scheduled_event_id {$patchDirection}");
				foreach ($scheduledPayments as $scheduledPayment)
				{
					$wpdb->query("UPDATE ".MM_TABLE_SCHEDULED_PAYMENTS." SET id='{$scheduledPayment->scheduled_event_id}' WHERE scheduled_event_id='{$scheduledPayment->scheduled_event_id}'");
				}
				$wpdb->query("ALTER TABLE ".MM_TABLE_SCHEDULED_PAYMENTS." DROP COLUMN scheduled_event_id");
			}
		}
	}
 }